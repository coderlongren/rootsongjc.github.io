<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Jimmy&#39;s blog</title>
    <link>http://rootsongjc.github.io/tags/architecture/index.xml</link>
    <description>Recent content in Architecture on Jimmy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://rootsongjc.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>微服务设计读书笔记</title>
      <link>http://rootsongjc.github.io/talks/microservice-reading-notes/</link>
      <pubDate>Sat, 11 Mar 2017 15:45:27 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/microservice-reading-notes/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20160625036.jpg&#34; alt=&#34;青海湖畔&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(题图：青海湖畔  Jun 25,2016)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近在看&lt;strong&gt;《微服务设计（Sam Newman著）》&lt;/strong&gt;这本书，&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/docs/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B8%AD%E6%96%87%E5%AE%8C%E6%95%B4%E7%89%88-Sam%20Newman-%E4%BA%BA%E6%B0%91%E9%82%AE%E7%94%B5%E5%87%BA%E7%89%88%E7%A4%BE.pdf&#34;&gt;下载本书PDF&lt;/a&gt;(扫描版，高清49.17M)。作者是&lt;strong&gt;ThoughtWorks&lt;/strong&gt;的Sam Newman。这本书中包括很多业界是用案例，比如&lt;strong&gt;Netflix&lt;/strong&gt;和&lt;strong&gt;亚马逊&lt;/strong&gt;。有兴趣的话大家一起看看讨论一下。😄&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B9%A6%E7%9A%AE%E7%85%A7.jpg&#34; alt=&#34;微服务设计书皮照片&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本书读者交流微信群二维码，扫码入群（3月18日前有效）&lt;/strong&gt;，如果二维码失效，请移步&lt;a href=&#34;http://rootsongjc.github.io/about/&#34;&gt;这里&lt;/a&gt;加我微信，拉你入群。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg&#34; alt=&#34;二维码&#34; /&gt;&lt;/p&gt;

&lt;p&gt;P.S 这本书比较偏理论，另外还有一本中国人写的书，&lt;strong&gt;《微服务架构与实践，王磊著，电子工业出版社》&lt;/strong&gt;，&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/docs/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E7%8E%8B%E7%A3%8A%E8%91%97-%E7%94%B5%E5%AD%90%E5%B7%A5%E4%B8%9A%E5%87%BA%E7%89%88%E7%A4%BE.pdf&#34;&gt;下载本书的pdf&lt;/a&gt;，文字版，大小28.08M。这个人同样也是&lt;strong&gt;ThoughtWorks&lt;/strong&gt;的，两个人的观点不谋而合，依然是便理论的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Go - 基于Go和React的web云服务构建指南&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这本书是我最近在翻译的，将由&lt;strong&gt;电子工业出版社&lt;/strong&gt;出版，本书根据实际案例教你如何构建一个web微服务，是实践为服务架构的很好的参考。&lt;a href=&#34;http://rootsongjc.github.io/talks/cloud-native-go/&#34;&gt;查看本书介绍&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;1-微服务初探&#34;&gt;1.微服务初探&lt;/h2&gt;

&lt;h3 id=&#34;什么是微服务&#34;&gt;什么是微服务？&lt;/h3&gt;

&lt;p&gt;微服务（Microservices）这个词比较新颖，但是其实这种架构设计理念早就有了。&lt;em&gt;微服务是一种分布式架构设计理念，为了推动细粒度服务的使用，这些服务要能协同工作，每个服务都有自己的生命周期。一个为服务就是一个独立的实体，可以独立的部署在PAAS平台上，也可以作为一个独立的进程在主机中运行。服务之间通过API访问，修改一个服务不会影响其它服务。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;微服务的好处&#34;&gt;微服务的好处&lt;/h3&gt;

&lt;p&gt;微服务的好处有很多，包括:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;帮助你更快的采用新技术&lt;/li&gt;
&lt;li&gt;解决技术异构的问题，因为是用API网络通信，可以使用不同的语言和技术开发不同的服务&lt;/li&gt;
&lt;li&gt;增强系统弹性，服务的边界比较清晰，便于故障处理&lt;/li&gt;
&lt;li&gt;方便扩展，比如使用容器技术，可以很方便的一次性启动很多个微服务&lt;/li&gt;
&lt;li&gt;方便部署，因为微服务之间彼此独立，所以能够独立的部署单个服务而不影响其它服务，如果部署失败的话还可以回滚&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别忘了康为定律，微服务可以很好契合解决组织架构问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可重用，可随意组合&lt;/li&gt;
&lt;li&gt;便于维护，可以随时重写服务，不必担心历史遗留问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;与面向服务架构soa的关系&#34;&gt;与面向服务架构SOA的关系&lt;/h3&gt;

&lt;p&gt;可以说微服务架构师SOA的一种，但是目前的大多数SOA做的都不好，在&lt;code&gt;通信协议的选择&lt;/code&gt;、&lt;code&gt;第三方中间件的选择&lt;/code&gt;、&lt;code&gt;服务力度如何划分&lt;/code&gt;方面做的都不够好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;微服务与SOA的共同点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;都使用共享库，比如可重用的代码库&lt;/li&gt;
&lt;li&gt;模块化，比如Java中的OSGI(Open Source Gateway Initiative)、Erlang中的模块化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-架构师的职责&#34;&gt;2.架构师的职责&lt;/h2&gt;

&lt;h3 id=&#34;架构师应该关心是什么&#34;&gt;架构师应该关心是什么&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;架构师（Architect）&lt;/strong&gt;在英文中和&lt;strong&gt;建筑师&lt;/strong&gt;是同一个词，他们之间也有很多相同之处，架构师构建的是软件，而建筑师构建的是建筑。&lt;/p&gt;

&lt;p&gt;终于看到了我翻译的*Cloud Native Go*第14章中引用的这本书的原话了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%BC%95%E7%94%A8%E7%BF%BB%E8%AF%91.jpg&#34; alt=&#34;原话&#34; /&gt;&lt;/p&gt;

&lt;p&gt;软件的需求变更是&lt;strong&gt;来的那么快来的那么直接&lt;/strong&gt;，不像建筑那样可以在设计好后按照设计图纸一步步的去建设。&lt;/p&gt;

&lt;p&gt;架构师应该关心的是什么呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保证系统适合开发人员在上面工作&lt;/li&gt;
&lt;li&gt;关注服务之间的交互，不需要过于关注各个服务内部发生的事情，比如服务之间互相调用的接口，是使用&lt;code&gt;protocol buffer&lt;/code&gt;呢，还是使用&lt;code&gt;RESTful API&lt;/code&gt;，还是使用&lt;code&gt;Java RMI&lt;/code&gt;，这个才是架构师需要关注的问题，至于服务内部究竟使用什么，那就看开发人员自己了，&lt;strong&gt;架构师更需要关注系统的边界和分区&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;架构师应该与团队在一起，&lt;strong&gt;结对编程&lt;/strong&gt; 🤓🤓 了解普通工作，知道普通的工作是什么样子，做一个&lt;em&gt;代码架构师&lt;/em&gt; 😂&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;架构师应该做什么&#34;&gt;架构师应该做什么&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;提供原则指导实践，比如Heroku的&lt;a href=&#34;http://rootsongjc.github.io/blogs/12-factor-app/&#34;&gt;12因素法则&lt;/a&gt;用来指导SAAS应用架构一样，微服务架构设计也要有一套原则。&lt;/li&gt;
&lt;li&gt;提供要求标准，通过日志功能和监控对服务进行集中式管理，明确接口标准，提供安全性建议。&lt;/li&gt;
&lt;li&gt;代码治理。为开发人员提供范例和服务代码模板。&lt;/li&gt;
&lt;li&gt;解决技术债务。&lt;/li&gt;
&lt;li&gt;集中治理和领导。维持良好的团队关系，当团队跑偏的时候及时纠正。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-服务建模&#34;&gt;3.服务建模&lt;/h2&gt;

&lt;p&gt;以&lt;strong&gt;MusicCorp&lt;/strong&gt;这家公司的服务为例子讲解。&lt;/p&gt;

&lt;p&gt;服务建模的两个指导原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;高内聚：关键是找出问题的边界，把相关的问题放在同一个服务中。&lt;/li&gt;
&lt;li&gt;松耦合：修改一个服务不需要修改另一个。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;strong&gt;限定上下文&lt;/strong&gt;（一个由显示边界限定的特定指责）的方法将服务拆分，比如MusicCorp的服务可以拆分为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;财务部门&lt;/li&gt;
&lt;li&gt;仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们都不需要知道各自的具体实现，只要给它们提供特定的输入就会有你想要的产出。&lt;/p&gt;

&lt;p&gt;过早的将一个系统划分成微服务的代价非常高，尤其是在面对新领域时，将一个已有的代码库划分成微服务会比葱头开始建设微服务要简单的多。&lt;/p&gt;

&lt;h2 id=&#34;4-集成&#34;&gt;4.集成&lt;/h2&gt;

&lt;p&gt;使用共享数据库，为用户创建好接口，可以使用RPC（protocol buffer、thrift）或者REST。服务端和客户端消息格式可以用Json或XML。当然每种技术都有各自的适用场景，结合自己的业务选择。&lt;/p&gt;

&lt;p&gt;微服务的协作方式是什么样的呢？基于事件的异步通信，使用消息中间件来实现事件发布和消费者接收机制。比如用Kafka或RabbitMQ。&lt;/p&gt;

&lt;h2 id=&#34;5-分解单块系统&#34;&gt;5.分解单块系统&lt;/h2&gt;

&lt;p&gt;分解巨大无比没人感动的单块系统，首先要做的是理清代码库，找到&lt;strong&gt;接缝&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;分解系统带来的好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加快以后系统开发速度&lt;/li&gt;
&lt;li&gt;划清了团队结构（又是康威定律）&lt;/li&gt;
&lt;li&gt;增加安全审计功能后，保障安全性&lt;/li&gt;
&lt;li&gt;利于开展新技术&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-部署&#34;&gt;6. 部署&lt;/h2&gt;

&lt;p&gt;这一块跟传统服务的部署并没有太大的不同，无非是微服务的短平快，加快了CI（持续集成）的速度。如果将微服务打包为docker镜像，使用Jenkins、ansible、puppet等技术来部署微服务可以实现部署自动和效率的显著提高。&lt;/p&gt;

&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;

&lt;p&gt;该书的后面还讲了&lt;strong&gt;测试&lt;/strong&gt;、&lt;strong&gt;监控&lt;/strong&gt;、&lt;strong&gt;安全&lt;/strong&gt;、&lt;strong&gt;康威定律&lt;/strong&gt;、最后还上升到&lt;strong&gt;人本&lt;/strong&gt;，给予广大的软件开发人员强烈的人文关怀，可见提倡架构师要融入团队，最一个&lt;strong&gt;代码架构师&lt;/strong&gt;和&lt;strong&gt;结对编程&lt;/strong&gt;的作者是多么博爱❤️。&lt;/p&gt;

&lt;p&gt;该书的核心部分是&lt;strong&gt;第11章规模化微服务&lt;/strong&gt;，为将在下篇中来探讨一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>《云计算技术架构与实践》读后感</title>
      <link>http://rootsongjc.github.io/blogs/cloud-computing-architecture-practice/</link>
      <pubDate>Wed, 01 Mar 2017 18:29:36 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/blogs/cloud-computing-architecture-practice/</guid>
      <description>&lt;p&gt;最近友人推荐了一本书，是华为的工程师写的《云计算架构与实践第二版》，正好在网上找到了这本书的pdf，分享给大家，&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/docs/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%AC%AC2%E7%89%88.pdf&#34;&gt;点这里下载&lt;/a&gt;，书是文字版的，大小13.04MB，除了章节顺序有点问题外没有其他什么问题。&lt;/p&gt;

&lt;p&gt;后续我将会陆续分享这本书的读后感。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>