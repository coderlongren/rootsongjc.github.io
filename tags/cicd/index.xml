<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cicd on Jimmy Song&#39;s Blog</title>
    <link>http://rootsongjc.github.io/tags/cicd/</link>
    <description>Recent content in Cicd on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Jun 2017 20:52:57 +0800</lastBuildDate>
    
	<atom:link href="http://rootsongjc.github.io/tags/cicd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Jenkins进行持续构建与发布应用到kubernetes集群中</title>
      <link>http://rootsongjc.github.io/blogs/kubernetes-jenkins-ci-cd/</link>
      <pubDate>Tue, 27 Jun 2017 20:52:57 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/blogs/kubernetes-jenkins-ci-cd/</guid>
      <description>本文已归档到kubernetes-handbook中的【最佳实践—使用Jenkins进行持续构建与发布】章节中，一切内容以kubernetes-handbook中稳准。
我们基于Jenkins的CI/CD流程如下所示。
流程说明 应用构建和发布流程说明。
 用户向Gitlab提交代码，代码中必须包含Dockerfile 将代码提交到远程仓库 用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数等，确定后触发Jenkins自动构建 Jenkins的CI流水线自动编译代码并打包成docker镜像推送到Harbor镜像仓库 Jenkins的CI流水线中包括了自定义脚本，根据我们已准备好的kubernetes的YAML模板，将其中的变量替换成用户输入的选项 生成应用的kubernetes YAML配置文件 更新Ingress的配置，根据新部署的应用的名称，在ingress的配置文件中增加一条路由信息 更新PowerDNS，向其中插入一条DNS记录，IP地址是边缘节点的IP地址。关于边缘节点，请查看边缘节点配置 Jenkins调用kubernetes的API，部署应用  关于应用的更新、滚动升级、灰度发布请留意博客中的后续文章或关注kubernetes-handbook的更新。</description>
    </item>
    
  </channel>
</rss>