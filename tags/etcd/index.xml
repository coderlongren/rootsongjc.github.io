<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Etcd on Jimmy Song&#39;s Blog</title>
    <link>http://rootsongjc.github.io/tags/etcd/index.xml</link>
    <description>Recent content in Etcd on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://rootsongjc.github.io/tags/etcd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kubernetes安装之etcd高可用配置</title>
      <link>http://rootsongjc.github.io/blogs/kubernetes-etcd-ha-config/</link>
      <pubDate>Tue, 11 Apr 2017 15:21:39 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/blogs/kubernetes-etcd-ha-config/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/2015091401.jpg&#34; alt=&#34;西山俯瞰北京夜景&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（题图：北京夜景@西山）&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;这是&lt;a href=&#34;https://github.com/rootsongjc/follow-me-install-kubernetes-cluster&#34;&gt;和我一步步部署kubernetes集群&lt;/a&gt;项目((fork自&lt;a href=&#34;https://github.com/opsnull/follow-me-install-kubernetes-cluster&#34;&gt;opsnull&lt;/a&gt;))中的一篇文章，下文是结合我&lt;a href=&#34;http://rootsongjc.github.io/tags/kubernetes/&#34;&gt;之前部署kubernetes的过程&lt;/a&gt;产生的kuberentes环境，生成&lt;strong&gt;kubeconfig&lt;/strong&gt;文件的过程。&lt;/p&gt;

&lt;h2 id=&#34;创建高可用-etcd-集群&#34;&gt;创建高可用 etcd 集群&lt;/h2&gt;

&lt;p&gt;kuberntes 系统使用 etcd 存储所有数据，本文档介绍部署一个三节点高可用 etcd 集群的步骤，这三个节点复用 kubernetes master 机器，分别命名为&lt;code&gt;sz-pg-oam-docker-test-001.tendcloud.com&lt;/code&gt;、&lt;code&gt;sz-pg-oam-docker-test-002.tendcloud.com&lt;/code&gt;、&lt;code&gt;sz-pg-oam-docker-test-003.tendcloud.com&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sz-pg-oam-docker-test-001.tendcloud.com：172.20.0.113&lt;/li&gt;
&lt;li&gt;sz-pg-oam-docker-test-002.tendcloud.com：172.20.0.114&lt;/li&gt;
&lt;li&gt;sz-pg-oam-docker-test-003.tendcloud.com：172.20.0.115&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tls-认证文件&#34;&gt;TLS 认证文件&lt;/h2&gt;

&lt;p&gt;需要为 etcd 集群创建加密通信的 TLS 证书，这里复用以前创建的 kubernetes 证书&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cp ca.pem kubernetes-key.pem kubernetes.pem /etc/kubernetes/ssl
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;kubernetes 证书的 &lt;code&gt;hosts&lt;/code&gt; 字段列表中包含上面三台机器的 IP，否则后续证书校验会失败；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;下载二进制文件&#34;&gt;下载二进制文件&lt;/h2&gt;

&lt;p&gt;到 &lt;code&gt;https://github.com/coreos/etcd/releases&lt;/code&gt; 页面下载最新版本的二进制文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ https://github.com/coreos/etcd/releases/download/v3.1.5/etcd-v3.1.5-linux-amd64.tar.gz
$ tar -xvf etcd-v3.1.4-linux-amd64.tar.gz
$ sudo mv etcd-v3.1.4-linux-amd64/etcd* /root/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建-etcd-的-systemd-unit-文件&#34;&gt;创建 etcd 的 systemd unit 文件&lt;/h2&gt;

&lt;p&gt;注意替换 &lt;code&gt;ETCD_NAME&lt;/code&gt; 和 &lt;code&gt;INTERNAL_IP&lt;/code&gt; 变量的值；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export ETCD_NAME=sz-pg-oam-docker-test-001.tendcloud.com
$ export INTERNAL_IP=172.20.0.113
$ sudo mkdir -p /var/lib/etcd /var/lib/etcd
$ cat &amp;gt; etcd.service &amp;lt;&amp;lt;EOF
[Unit]
Description=Etcd Server
After=network.target
After=network-online.target
Wants=network-online.target
Documentation=https://github.com/coreos

[Service]
Type=notify
WorkingDirectory=/var/lib/etcd/
EnvironmentFile=-/etc/etcd/etcd.conf
ExecStart=/root/local/bin/etcd \\
  --name ${ETCD_NAME} \\
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \\
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \\
  --peer-cert-file=/etc/kubernetes/ssl/kubernetes.pem \\
  --peer-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \\
  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \\
  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \\
  --initial-advertise-peer-urls https://${INTERNAL_IP}:2380 \\
  --listen-peer-urls https://${INTERNAL_IP}:2380 \\
  --listen-client-urls https://${INTERNAL_IP}:2379,https://127.0.0.1:2379 \\
  --advertise-client-urls https://${INTERNAL_IP}:2379 \\
  --initial-cluster-token etcd-cluster-0 \\
  --initial-cluster sz-pg-oam-docker-test-001.tendcloud.com=https://172.20.0.113:2380,sz-pg-oam-docker-test-002.tendcloud.com=https://172.20.0.114:2380,sz-pg-oam-docker-test-003.tendcloud.com=https://172.20.0.115:2380 \\
  --initial-cluster-state new \\
  --data-dir=/var/lib/etcd
Restart=on-failure
RestartSec=5
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;指定 &lt;code&gt;etcd&lt;/code&gt; 的工作目录为 &lt;code&gt;/var/lib/etcd&lt;/code&gt;，数据目录为 &lt;code&gt;/var/lib/etcd&lt;/code&gt;，需在启动服务前创建这两个目录；&lt;/li&gt;
&lt;li&gt;为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和 CA 证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）；&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;kubernetes.pem&lt;/code&gt; 证书时使用的 &lt;code&gt;kubernetes-csr.json&lt;/code&gt; 文件的 &lt;code&gt;hosts&lt;/code&gt; 字段&lt;strong&gt;包含所有 etcd 节点的 INTERNAL_IP&lt;/strong&gt;，否则证书校验会出错；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--initial-cluster-state&lt;/code&gt; 值为 &lt;code&gt;new&lt;/code&gt; 时，&lt;code&gt;--name&lt;/code&gt; 的参数值必须位于 &lt;code&gt;--initial-cluster&lt;/code&gt; 列表中；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;完整 unit 文件见：&lt;a href=&#34;./systemd/etcd.service&#34;&gt;etcd.service&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;启动-etcd-服务&#34;&gt;启动 etcd 服务&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo mv etcd.service /etc/systemd/system/
$ sudo systemctl daemon-reload
$ sudo systemctl enable etcd
$ sudo systemctl start etcd
$ systemctl status etcd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在所有的 kubernetes master 节点重复上面的步骤，直到所有机器的 etcd 服务都已启动。&lt;/p&gt;

&lt;h2 id=&#34;验证服务&#34;&gt;验证服务&lt;/h2&gt;

&lt;p&gt;在任一 kubernetes master 机器上执行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ etcdctl \
  --ca-file=/etc/kubernetes/ssl/ca.pem \
  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \
  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \
  cluster-health
2017-04-11 15:17:09.082250 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated
2017-04-11 15:17:09.083681 I | warning: ignoring ServerName for user-provided CA for backwards compatibility is deprecated
member 9a2ec640d25672e5 is healthy: got healthy result from https://172.20.0.115:2379
member bc6f27ae3be34308 is healthy: got healthy result from https://172.20.0.114:2379
member e5c92ea26c4edba0 is healthy: got healthy result from https://172.20.0.113:2379
cluster is healthy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果最后一行为 &lt;code&gt;cluster is healthy&lt;/code&gt; 时表示集群服务正常。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>