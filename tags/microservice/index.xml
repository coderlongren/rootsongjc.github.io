<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservice on Jimmy Song&#39;s Blog</title>
    <link>http://rootsongjc.github.io/tags/microservice/</link>
    <description>Recent content in Microservice on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Mar 2017 15:45:27 +0800</lastBuildDate>
    
	<atom:link href="http://rootsongjc.github.io/tags/microservice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>微服务设计读书笔记</title>
      <link>http://rootsongjc.github.io/talks/microservice-reading-notes/</link>
      <pubDate>Sat, 11 Mar 2017 15:45:27 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/microservice-reading-notes/</guid>
      <description>(题图：青海湖畔 Jun 25,2016)
最近在看《微服务设计（Sam Newman著）》这本书，下载本书PDF(扫描版，高清49.17M)。作者是ThoughtWorks的Sam Newman。这本书中包括很多业界是用案例，比如Netflix和亚马逊。有兴趣的话大家一起看看讨论一下。😄
本书读者交流微信群二维码，扫码入群（3月18日前有效），如果二维码失效，请移步这里加我微信，拉你入群。
P.S 这本书比较偏理论，另外还有一本中国人写的书，《微服务架构与实践，王磊著，电子工业出版社》，下载本书的pdf，文字版，大小28.08M。这个人同样也是ThoughtWorks的，两个人的观点不谋而合，依然是便理论的东西。
Cloud Native Go - 基于Go和React的web云服务构建指南
这本书是我最近在翻译的，将由电子工业出版社出版，本书根据实际案例教你如何构建一个web微服务，是实践为服务架构的很好的参考。查看本书介绍。
1.微服务初探 什么是微服务？ 微服务（Microservices）这个词比较新颖，但是其实这种架构设计理念早就有了。微服务是一种分布式架构设计理念，为了推动细粒度服务的使用，这些服务要能协同工作，每个服务都有自己的生命周期。一个为服务就是一个独立的实体，可以独立的部署在PAAS平台上，也可以作为一个独立的进程在主机中运行。服务之间通过API访问，修改一个服务不会影响其它服务。
微服务的好处 微服务的好处有很多，包括:
 帮助你更快的采用新技术 解决技术异构的问题，因为是用API网络通信，可以使用不同的语言和技术开发不同的服务 增强系统弹性，服务的边界比较清晰，便于故障处理 方便扩展，比如使用容器技术，可以很方便的一次性启动很多个微服务 方便部署，因为微服务之间彼此独立，所以能够独立的部署单个服务而不影响其它服务，如果部署失败的话还可以回滚 别忘了康为定律，微服务可以很好契合解决组织架构问题 可重用，可随意组合 便于维护，可以随时重写服务，不必担心历史遗留问题  与面向服务架构SOA的关系 可以说微服务架构师SOA的一种，但是目前的大多数SOA做的都不好，在通信协议的选择、第三方中间件的选择、服务力度如何划分方面做的都不够好。
微服务与SOA的共同点
 都使用共享库，比如可重用的代码库 模块化，比如Java中的OSGI(Open Source Gateway Initiative)、Erlang中的模块化  2.架构师的职责 架构师应该关心是什么 架构师（Architect）在英文中和建筑师是同一个词，他们之间也有很多相同之处，架构师构建的是软件，而建筑师构建的是建筑。
终于看到了我翻译的*Cloud Native Go*第14章中引用的这本书的原话了。
软件的需求变更是来的那么快来的那么直接，不像建筑那样可以在设计好后按照设计图纸一步步的去建设。
架构师应该关心的是什么呢？
 保证系统适合开发人员在上面工作 关注服务之间的交互，不需要过于关注各个服务内部发生的事情，比如服务之间互相调用的接口，是使用protocol buffer呢，还是使用RESTful API，还是使用Java RMI，这个才是架构师需要关注的问题，至于服务内部究竟使用什么，那就看开发人员自己了，架构师更需要关注系统的边界和分区。 架构师应该与团队在一起，结对编程 🤓🤓 了解普通工作，知道普通的工作是什么样子，做一个代码架构师 😂  架构师应该做什么  提供原则指导实践，比如Heroku的12因素法则用来指导SAAS应用架构一样，微服务架构设计也要有一套原则。 提供要求标准，通过日志功能和监控对服务进行集中式管理，明确接口标准，提供安全性建议。 代码治理。为开发人员提供范例和服务代码模板。 解决技术债务。 集中治理和领导。维持良好的团队关系，当团队跑偏的时候及时纠正。  3.服务建模 以MusicCorp这家公司的服务为例子讲解。</description>
    </item>
    
    <item>
      <title>Cloud Native Go - 基于Go和React的web云服务构建指南</title>
      <link>http://rootsongjc.github.io/talks/cloud-native-go/</link>
      <pubDate>Fri, 03 Mar 2017 17:29:54 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/cloud-native-go/</guid>
      <description>(题图：北京植物园桃花 Mar 26,2016)
更新于Apr 3,2017
最近在翻译Kevin Hoffman和Dan Nemeth的书《Cloud Native Go - 基于Go和React的web云服务构建指南》。目前已经完成图书的翻译，已交给编辑校对。本书将由电子工业出版社出版。
简介 Cloud Native Go向开发人员展示如何构建大规模云应用程序，在满足当今客户的强大需求的同时还可以动态扩展来处理几乎任何规模的数据量、流量或用户。
Kevin Hoffman和Dan Nemeth详细描述了现代云原生应用程序，阐明了与快速、可靠的云原生开发相关的因素、规则和习惯。他们还介绍了Go这种“简单优雅”的高性能语言，它特别适合于云开发。
在本书中你将使用Go语言创建微服务，使用ReactJS和Flux添加前端Web组件，并掌握基于Go的高级云原生技术。Hoffman和Nemeth展示了如何使用Wercker、Docker和Dockerhub等工具构建持续交付管道; 自动推送应用程序到平台上; 并系统地监控生产中的应用程序性能。
 学习“云之道”：为什么开发好的云软件基本上是关于心态和规则 了解为什么使用Go语言是云本地微服务开发的理想选择 规划支持持续交付和部署的云应用程序 设计服务生态系统，然后以test-first的方式构建它们
 将正在进行的工作推送到云
 使用事件源和CQRS模式来响应大规模和高吞吐量
 安全的基于云的Web应用程序：做与不做的选择
 使用第三方消息传递供应商创建响应式云应用程序
 使用React和Flux构建大规模，云友好的GUI
 监控云中的动态扩展，故障转移和容错
  下面先罗列下目录，以飨读者。
目录 Cloud Native Go. 1
构建基于Go和React的云原生Web应用&amp;hellip; 1
云服务构建完全指南&amp;hellip; 1
目录&amp;hellip; 4
前言&amp;hellip; 8
关于作者&amp;hellip; 9
致谢&amp;hellip; 9
第1章 云之道&amp;hellip; 10 云的优势&amp;hellip; 10
崇尚简洁&amp;hellip; 11
测试优先，测试一切&amp;hellip; 11
尽早发布, 频繁发布&amp;hellip; 12</description>
    </item>
    
  </channel>
</rss>