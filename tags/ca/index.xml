<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ca on Jimmy Song&#39;s Blog</title>
    <link>http://rootsongjc.github.io/tags/ca/index.xml</link>
    <description>Recent content in Ca on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://rootsongjc.github.io/tags/ca/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kubernetes安装之证书验证</title>
      <link>http://rootsongjc.github.io/blogs/kubernetes-tls-certificate/</link>
      <pubDate>Mon, 10 Apr 2017 17:28:41 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/blogs/kubernetes-tls-certificate/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/2014082502.jpg&#34; alt=&#34;颐和园&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（题图：铜牛@颐和园 Aug 25,2014）&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;昨晚（Apr 9,2017）金山软件的&lt;a href=&#34;https://github.com/opsnull&#34;&gt;opsnull&lt;/a&gt;发布了一个开源项目&lt;a href=&#34;https://github.com/opsnull/follow-me-install-kubernetes-cluster&#34;&gt;和我一步步部署kubernetes集群&lt;/a&gt;，下文是结合我&lt;a href=&#34;http://rootsongjc.github.io/tags/kubernetes/&#34;&gt;之前部署kubernetes的过程&lt;/a&gt;打造的kubernetes环境和opsnull的文章&lt;a href=&#34;https://github.com/opsnull/follow-me-install-kubernetes-cluster/blob/master/01-TLS%E8%AF%81%E4%B9%A6%E5%92%8C%E7%A7%98%E9%92%A5.md&#34;&gt;创建 kubernetes 各组件 TLS 加密通信的证书和秘钥&lt;/a&gt;的实践。之前安装过程中一直使用的是非加密方式，一直到后来&lt;a href=&#34;http://rootsongjc.github.io/blogs/kubernetes-fluentd-elasticsearch-installation/&#34;&gt;使用Fluentd和ElasticSearch收集Kubernetes集群日志&lt;/a&gt;时发现有权限验证问题，所以为了深入研究kubernentes。&lt;/p&gt;

&lt;h2 id=&#34;kubernentes中的身份验证&#34;&gt;Kubernentes中的身份验证&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;kubernetes&lt;/code&gt; 系统的各组件需要使用 &lt;code&gt;TLS&lt;/code&gt; 证书对通信进行加密，本文档使用 &lt;code&gt;CloudFlare&lt;/code&gt; 的 PKI 工具集 &lt;a href=&#34;https://github.com/cloudflare/cfssl&#34;&gt;cfssl&lt;/a&gt; 来生成 Certificate Authority (CA) 和其它证书；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生成的 CA 证书和秘钥文件如下：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ca-key.pem&lt;/li&gt;
&lt;li&gt;ca.pem&lt;/li&gt;
&lt;li&gt;kubernetes-key.pem&lt;/li&gt;
&lt;li&gt;kubernetes.pem&lt;/li&gt;
&lt;li&gt;kube-proxy.pem&lt;/li&gt;
&lt;li&gt;kube-proxy-key.pem&lt;/li&gt;
&lt;li&gt;admin.pem&lt;/li&gt;
&lt;li&gt;admin-key.pem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;使用证书的组件如下：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;etcd：使用 ca.pem、kubernetes-key.pem、kubernetes.pem；&lt;/li&gt;
&lt;li&gt;kube-apiserver：使用 ca.pem、kubernetes-key.pem、kubernetes.pem；&lt;/li&gt;
&lt;li&gt;kubelet：使用 ca.pem；&lt;/li&gt;
&lt;li&gt;kube-proxy：使用 ca.pem、kube-proxy-key.pem、kube-proxy.pem；&lt;/li&gt;
&lt;li&gt;kubectl：使用 ca.pem、admin-key.pem、admin.pem；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;kube-controller&lt;/code&gt;、&lt;code&gt;kube-scheduler&lt;/code&gt; 当前需要和 &lt;code&gt;kube-apiserver&lt;/code&gt; 部署在同一台机器上且使用非安全端口通信，故不需要证书。&lt;/p&gt;

&lt;h2 id=&#34;安装-cfssl&#34;&gt;安装 &lt;code&gt;CFSSL&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;方式一：直接使用二进制源码包安装&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
$ chmod +x cfssl_linux-amd64
$ sudo mv cfssl_linux-amd64 /root/local/bin/cfssl

$ wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
$ chmod +x cfssljson_linux-amd64
$ sudo mv cfssljson_linux-amd64 /root/local/bin/cfssljson

$ wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64
$ chmod +x cfssl-certinfo_linux-amd64
$ sudo mv cfssl-certinfo_linux-amd64 /root/local/bin/cfssl-certinfo

$ export PATH=/root/local/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;方式二：使用go命令安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们的系统中安装了Go1.7.5，使用以下命令安装更快捷：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$go get -u github.com/cloudflare/cfssl/cmd/...
$echo $GOPATH
/usr/local
$ls /usr/local/bin/cfssl*
cfssl cfssl-bundle cfssl-certinfo cfssljson cfssl-newkey cfssl-scan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;$GOPATH/bin&lt;/code&gt;目录下得到以cfssl开头的几个命令。&lt;/p&gt;

&lt;h2 id=&#34;创建-ca-certificate-authority&#34;&gt;创建 CA (Certificate Authority)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;创建 CA 配置文件&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir /root/ssl
$ cd /root/ssl
$ cfssl print-defaults config &amp;gt; config.json
$ cfssl print-defaults csr &amp;gt; csr.json
$ cat ca-config.json
{
  &amp;quot;signing&amp;quot;: {
    &amp;quot;default&amp;quot;: {
      &amp;quot;expiry&amp;quot;: &amp;quot;8760h&amp;quot;
    },
    &amp;quot;profiles&amp;quot;: {
      &amp;quot;kubernetes&amp;quot;: {
        &amp;quot;usages&amp;quot;: [
            &amp;quot;signing&amp;quot;,
            &amp;quot;key encipherment&amp;quot;,
            &amp;quot;server auth&amp;quot;,
            &amp;quot;client auth&amp;quot;
        ],
        &amp;quot;expiry&amp;quot;: &amp;quot;8760h&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;字段说明&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ca-config.json&lt;/code&gt;：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signing&lt;/code&gt;：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 &lt;code&gt;CA=TRUE&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;server auth&lt;/code&gt;：表示client可以用该 CA 对server提供的证书进行验证；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client auth&lt;/code&gt;：表示server可以用该CA对client提供的证书进行验证；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;创建 CA 证书签名请求&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat ca-csr.json
{
  &amp;quot;CN&amp;quot;: &amp;quot;kubernetes&amp;quot;,
  &amp;quot;key&amp;quot;: {
    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
    &amp;quot;size&amp;quot;: 2048
  },
  &amp;quot;names&amp;quot;: [
    {
      &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
      &amp;quot;ST&amp;quot;: &amp;quot;BeiJing&amp;quot;,
      &amp;quot;L&amp;quot;: &amp;quot;BeiJing&amp;quot;,
      &amp;quot;O&amp;quot;: &amp;quot;k8s&amp;quot;,
      &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;CN&amp;rdquo;：&lt;code&gt;Common Name&lt;/code&gt;，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；&lt;/li&gt;
&lt;li&gt;&amp;ldquo;O&amp;rdquo;：&lt;code&gt;Organization&lt;/code&gt;，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;生成 CA 证书和私钥&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca
$ ls ca*
ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建-kubernetes-证书&#34;&gt;创建 kubernetes 证书&lt;/h2&gt;

&lt;p&gt;创建 kubernetes 证书签名请求&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat kubernetes-csr.json
{
    &amp;quot;CN&amp;quot;: &amp;quot;kubernetes&amp;quot;,
    &amp;quot;hosts&amp;quot;: [
      &amp;quot;127.0.0.1&amp;quot;,
      &amp;quot;172.20.0.112&amp;quot;,
      &amp;quot;172.20.0.113&amp;quot;,
      &amp;quot;172.20.0.114&amp;quot;,
      &amp;quot;172.20.0.115&amp;quot;,
      &amp;quot;10.254.0.1&amp;quot;,
      &amp;quot;kubernetes&amp;quot;,
      &amp;quot;kubernetes.default&amp;quot;,
      &amp;quot;kubernetes.default.svc&amp;quot;,
      &amp;quot;kubernetes.default.svc.cluster&amp;quot;,
      &amp;quot;kubernetes.default.svc.cluster.local&amp;quot;
    ],
    &amp;quot;key&amp;quot;: {
        &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
        &amp;quot;size&amp;quot;: 2048
    },
    &amp;quot;names&amp;quot;: [
        {
            &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
            &amp;quot;ST&amp;quot;: &amp;quot;BeiJing&amp;quot;,
            &amp;quot;L&amp;quot;: &amp;quot;BeiJing&amp;quot;,
            &amp;quot;O&amp;quot;: &amp;quot;k8s&amp;quot;,
            &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果 hosts 字段不为空则需要指定授权使用该证书的 &lt;strong&gt;IP 或域名列表&lt;/strong&gt;，由于该证书后续被 &lt;code&gt;etcd&lt;/code&gt; 集群和 &lt;code&gt;kubernetes master&lt;/code&gt; 集群使用，所以上面分别指定了 &lt;code&gt;etcd&lt;/code&gt; 集群、&lt;code&gt;kubernetes master&lt;/code&gt; 集群的主机 IP 和 &lt;strong&gt;&lt;code&gt;kubernetes&lt;/code&gt; 服务的服务 IP&lt;/strong&gt;（一般是 &lt;code&gt;kue-apiserver&lt;/code&gt; 指定的 &lt;code&gt;service-cluster-ip-range&lt;/code&gt; 网段的第一个IP，如 10.254.0.1。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;生成 kubernetes 证书和私钥&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes
$ ls kuberntes*
kubernetes.csr  kubernetes-csr.json  kubernetes-key.pem  kubernetes.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者直接在命令行上指定相关参数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;{&amp;quot;CN&amp;quot;:&amp;quot;kubernetes&amp;quot;,&amp;quot;hosts&amp;quot;:[&amp;quot;&amp;quot;],&amp;quot;key&amp;quot;:{&amp;quot;algo&amp;quot;:&amp;quot;rsa&amp;quot;,&amp;quot;size&amp;quot;:2048}}&#39; | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes -hostname=&amp;quot;127.0.0.1,10.64.3.7,10.254.0.1,kubernetes,kubernetes.default&amp;quot; - | cfssljson -bare kubernetes
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建-admin-证书&#34;&gt;创建 admin 证书&lt;/h2&gt;

&lt;p&gt;创建 admin 证书签名请求&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat admin-csr.json
{
  &amp;quot;CN&amp;quot;: &amp;quot;admin&amp;quot;,
  &amp;quot;hosts&amp;quot;: [],
  &amp;quot;key&amp;quot;: {
    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
    &amp;quot;size&amp;quot;: 2048
  },
  &amp;quot;names&amp;quot;: [
    {
      &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
      &amp;quot;ST&amp;quot;: &amp;quot;BeiJing&amp;quot;,
      &amp;quot;L&amp;quot;: &amp;quot;BeiJing&amp;quot;,
      &amp;quot;O&amp;quot;: &amp;quot;system:masters&amp;quot;,
      &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;后续 &lt;code&gt;kube-apiserver&lt;/code&gt; 使用 &lt;code&gt;RBAC&lt;/code&gt; 对客户端(如 &lt;code&gt;kubelet&lt;/code&gt;、&lt;code&gt;kube-proxy&lt;/code&gt;、&lt;code&gt;Pod&lt;/code&gt;)请求进行授权；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kube-apiserver&lt;/code&gt; 预定义了一些 &lt;code&gt;RBAC&lt;/code&gt; 使用的 &lt;code&gt;RoleBindings&lt;/code&gt;，如 &lt;code&gt;cluster-admin&lt;/code&gt; 将 Group &lt;code&gt;system:masters&lt;/code&gt; 与 Role &lt;code&gt;cluster-admin&lt;/code&gt; 绑定，该 Role 授予了调用&lt;code&gt;kube-apiserver&lt;/code&gt; 的&lt;strong&gt;所有 API&lt;/strong&gt;的权限；&lt;/li&gt;
&lt;li&gt;OU 指定该证书的 Group 为 &lt;code&gt;system:masters&lt;/code&gt;，&lt;code&gt;kubelet&lt;/code&gt; 使用该证书访问 &lt;code&gt;kube-apiserver&lt;/code&gt; 时 ，由于证书被 CA 签名，所以认证通过，同时由于证书用户组为经过预授权的 &lt;code&gt;system:masters&lt;/code&gt;，所以被授予访问所有 API 的权限；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成 admin 证书和私钥&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin
$ ls admin*
admin.csr  admin-csr.json  admin-key.pem  admin.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建-kube-proxy-证书&#34;&gt;创建 kube-proxy 证书&lt;/h2&gt;

&lt;p&gt;创建 kube-proxy 证书签名请求&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat kube-proxy-csr.json
{
  &amp;quot;CN&amp;quot;: &amp;quot;system:kube-proxy&amp;quot;,
  &amp;quot;hosts&amp;quot;: [],
  &amp;quot;key&amp;quot;: {
    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,
    &amp;quot;size&amp;quot;: 2048
  },
  &amp;quot;names&amp;quot;: [
    {
      &amp;quot;C&amp;quot;: &amp;quot;CN&amp;quot;,
      &amp;quot;ST&amp;quot;: &amp;quot;BeiJing&amp;quot;,
      &amp;quot;L&amp;quot;: &amp;quot;BeiJing&amp;quot;,
      &amp;quot;O&amp;quot;: &amp;quot;k8s&amp;quot;,
      &amp;quot;OU&amp;quot;: &amp;quot;System&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;CN 指定该证书的 User 为 &lt;code&gt;system:kube-proxy&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kube-apiserver&lt;/code&gt; 预定义的 RoleBinding &lt;code&gt;cluster-admin&lt;/code&gt; 将User &lt;code&gt;system:kube-proxy&lt;/code&gt; 与 Role &lt;code&gt;system:node-proxier&lt;/code&gt; 绑定，该 Role 授予了调用 &lt;code&gt;kube-apiserver&lt;/code&gt; Proxy 相关 API 的权限；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成 kube-proxy 客户端证书和私钥&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy
$ ls kube-proxy*
kube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;校验证书&#34;&gt;校验证书&lt;/h2&gt;

&lt;p&gt;以 kubernetes 证书为例&lt;/p&gt;

&lt;h3 id=&#34;使用-opsnssl-命令&#34;&gt;使用 &lt;code&gt;opsnssl&lt;/code&gt; 命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ openssl x509  -noout -text -in  kubernetes.pem
...
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=CN, ST=BeiJing, L=BeiJing, O=k8s, OU=System, CN=Kubernetes
        Validity
            Not Before: Apr  5 05:36:00 2017 GMT
            Not After : Apr  5 05:36:00 2018 GMT
        Subject: C=CN, ST=BeiJing, L=BeiJing, O=k8s, OU=System, CN=kubernetes
...
        X509v3 extensions:
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage:
                TLS Web Server Authentication, TLS Web Client Authentication
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Subject Key Identifier:
                DD:52:04:43:10:13:A9:29:24:17:3A:0E:D7:14:DB:36:F8:6C:E0:E0
            X509v3 Authority Key Identifier:
                keyid:44:04:3B:60:BD:69:78:14:68:AF:A0:41:13:F6:17:07:13:63:58:CD

            X509v3 Subject Alternative Name:
                DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster, DNS:kubernetes.default.svc.cluster.local, IP Address:127.0.0.1, IP Address:10.64.3.7, IP Address:10.254.0.1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;确认 &lt;code&gt;Issuer&lt;/code&gt; 字段的内容和 &lt;code&gt;ca-csr.json&lt;/code&gt; 一致；&lt;/li&gt;
&lt;li&gt;确认 &lt;code&gt;Subject&lt;/code&gt; 字段的内容和 &lt;code&gt;kubernetes-csr.json&lt;/code&gt; 一致；&lt;/li&gt;
&lt;li&gt;确认 &lt;code&gt;X509v3 Subject Alternative Name&lt;/code&gt; 字段的内容和 &lt;code&gt;kubernetes-csr.json&lt;/code&gt; 一致；&lt;/li&gt;
&lt;li&gt;确认 &lt;code&gt;X509v3 Key Usage、Extended Key Usage&lt;/code&gt; 字段的内容和 &lt;code&gt;ca-config.json&lt;/code&gt; 中 &lt;code&gt;kubernetes&lt;/code&gt; profile 一致；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使用-cfssl-certinfo-命令&#34;&gt;使用 &lt;code&gt;cfssl-certinfo&lt;/code&gt; 命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cfssl-certinfo -cert kubernetes.pem
...
{
  &amp;quot;subject&amp;quot;: {
    &amp;quot;common_name&amp;quot;: &amp;quot;kubernetes&amp;quot;,
    &amp;quot;country&amp;quot;: &amp;quot;CN&amp;quot;,
    &amp;quot;organization&amp;quot;: &amp;quot;k8s&amp;quot;,
    &amp;quot;organizational_unit&amp;quot;: &amp;quot;System&amp;quot;,
    &amp;quot;locality&amp;quot;: &amp;quot;BeiJing&amp;quot;,
    &amp;quot;province&amp;quot;: &amp;quot;BeiJing&amp;quot;,
    &amp;quot;names&amp;quot;: [
      &amp;quot;CN&amp;quot;,
      &amp;quot;BeiJing&amp;quot;,
      &amp;quot;BeiJing&amp;quot;,
      &amp;quot;k8s&amp;quot;,
      &amp;quot;System&amp;quot;,
      &amp;quot;kubernetes&amp;quot;
    ]
  },
  &amp;quot;issuer&amp;quot;: {
    &amp;quot;common_name&amp;quot;: &amp;quot;Kubernetes&amp;quot;,
    &amp;quot;country&amp;quot;: &amp;quot;CN&amp;quot;,
    &amp;quot;organization&amp;quot;: &amp;quot;k8s&amp;quot;,
    &amp;quot;organizational_unit&amp;quot;: &amp;quot;System&amp;quot;,
    &amp;quot;locality&amp;quot;: &amp;quot;BeiJing&amp;quot;,
    &amp;quot;province&amp;quot;: &amp;quot;BeiJing&amp;quot;,
    &amp;quot;names&amp;quot;: [
      &amp;quot;CN&amp;quot;,
      &amp;quot;BeiJing&amp;quot;,
      &amp;quot;BeiJing&amp;quot;,
      &amp;quot;k8s&amp;quot;,
      &amp;quot;System&amp;quot;,
      &amp;quot;Kubernetes&amp;quot;
    ]
  },
  &amp;quot;serial_number&amp;quot;: &amp;quot;174360492872423263473151971632292895707129022309&amp;quot;,
  &amp;quot;sans&amp;quot;: [
    &amp;quot;kubernetes&amp;quot;,
    &amp;quot;kubernetes.default&amp;quot;,
    &amp;quot;kubernetes.default.svc&amp;quot;,
    &amp;quot;kubernetes.default.svc.cluster&amp;quot;,
    &amp;quot;kubernetes.default.svc.cluster.local&amp;quot;,
    &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;10.64.3.7&amp;quot;,
    &amp;quot;10.254.0.1&amp;quot;
  ],
  &amp;quot;not_before&amp;quot;: &amp;quot;2017-04-05T05:36:00Z&amp;quot;,
  &amp;quot;not_after&amp;quot;: &amp;quot;2018-04-05T05:36:00Z&amp;quot;,
  &amp;quot;sigalg&amp;quot;: &amp;quot;SHA256WithRSA&amp;quot;,
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;分发证书&#34;&gt;分发证书&lt;/h2&gt;

&lt;p&gt;将生成的证书和秘钥文件（后缀名为&lt;code&gt;.pem&lt;/code&gt;）拷贝到所有机器的 &lt;code&gt;/etc/kubernetes/ssl&lt;/code&gt; 目录下备用；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo mkdir -p /etc/kubernetes/ssl
$ sudo cp *.pem /etc/kubernetes/ssl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coreos.com/os/docs/latest/generate-self-signed-certificates.html&#34;&gt;Generate self-signed certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/02-certificate-authority.md&#34;&gt;Setting up a Certificate Authority and Creating TLS Certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/kaushal/2012/02/17/client-certificates-vs-server-certificates/&#34;&gt;Client Certificates V/s Server Certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/104919/&#34;&gt;数字证书及 CA 的扫盲介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>