<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Jimmy&#39;s blog</title>
    <link>http://rootsongjc.github.io/tags/golang/index.xml</link>
    <description>Recent content in Golang on Jimmy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://rootsongjc.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go语言中的并发编程总结</title>
      <link>http://rootsongjc.github.io/projects/golang-concurrency-summary/</link>
      <pubDate>Fri, 24 Mar 2017 08:36:29 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/golang-concurrency-summary/</guid>
      <description>

&lt;h1 id=&#34;go语言并发编程总结&#34;&gt;Go语言并发编程总结&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Golang :不要通过共享内存来通信，而应该通过通信来共享内存。这句风靡在Go社区的话,说的就是 goroutine中的 channel。他在go并发编程中充当着类型安全的管道作用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;1-通过golang中的-goroutine-与sync-mutex进行并发同步&#34;&gt;1、通过golang中的 goroutine 与sync.Mutex进行并发同步&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import( 

    &amp;quot;fmt&amp;quot;

    &amp;quot;sync&amp;quot;

    &amp;quot;runtime&amp;quot;

)

var count int =0;

func counter(lock * sync.Mutex){

      lock.Lock()

      count++

      fmt.Println(count)

      lock.Unlock()

}

func main(){

   lock:=&amp;amp;sync.Mutex{}

   for i:=0;i&amp;lt;10;i++{

      //传递指针是为了防止 函数内的锁和 调用锁不一致

      go counter(lock)  

     }

   for{

      lock.Lock()

      c:=count

      lock.Unlock()

      ///把时间片给别的goroutine  未来某个时刻运行该routine

      runtime.Gosched()

      if c&amp;gt;=10{

        fmt.Println(&amp;quot;goroutine end&amp;quot;)

        break

        }

   }    

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-goroutine之间通过-channel进行通信&#34;&gt;2、goroutine之间通过 channel进行通信&lt;/h2&gt;

&lt;p&gt;channel是和类型相关的 可以理解为  是一种类型安全的管道。&lt;/p&gt;

&lt;p&gt;简单的channel 使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
package main  

import &amp;quot;fmt&amp;quot;

func Count(ch chan int) {

    ch &amp;lt;- 1  

    fmt.Println(&amp;quot;Counting&amp;quot;)

}

func main() {

    chs := make([]chan int, 10)

for i := 0; i &amp;lt; 10; i++ {

        chs[i] = make(chan int)

  go Count(chs[i])

  fmt.Println(&amp;quot;Count&amp;quot;,i)

    }

for i, ch := range chs {

  &amp;lt;-ch

  fmt.Println(&amp;quot;Counting&amp;quot;,i)

    }  

} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-go语言中的select是语言级内置-非堵塞&#34;&gt;3、Go语言中的select是语言级内置  非堵塞&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;select {

case &amp;lt;-chan1: // 如果chan1成功读到数据，则进行该case处理语句  

case chan2 &amp;lt;- 1: // 如果成功向chan2写入数据，则进行该case处理语句  

default: // 如果上面都没有成功，则进入default处理流程  

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，select不像switch，后面并不带判断条件，而是直接去查看case语句。每个&lt;/p&gt;

&lt;p&gt;case语句都必须是一个面向channel的操作。比如上面的例子中，第一个case试图从chan1读取&lt;/p&gt;

&lt;p&gt;一个数据并直接忽略读到的数据，而第二个case则是试图向chan2中写入一个整型数1，如果这&lt;/p&gt;

&lt;p&gt;两者都没有成功，则到达default语句。&lt;/p&gt;

&lt;h2 id=&#34;4-channel-的带缓冲读取写入&#34;&gt;4、channel 的带缓冲读取写入&lt;/h2&gt;

&lt;p&gt;之前我们示范创建的都是不带缓冲的channel，这种做法对于传递单个数据的场景可以接受，&lt;/p&gt;

&lt;p&gt;但对于需要持续传输大量数据的场景就有些不合适了。接下来我们介绍如何给channel带上缓冲，&lt;/p&gt;

&lt;p&gt;从而达到消息队列的效果。&lt;/p&gt;

&lt;p&gt;要创建一个带缓冲的channel，其实也非常容易：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;c := make(chan int, 1024)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在调用make()时将缓冲区大小作为第二个参数传入即可，比如上面这个例子就创建了一个大小&lt;/p&gt;

&lt;p&gt;为1024的int类型channel，即使没有读取方，写入方也可以一直往channel里写入，在缓冲区被&lt;/p&gt;

&lt;p&gt;填完之前都不会阻塞。&lt;/p&gt;

&lt;p&gt;从带缓冲的channel中读取数据可以使用与常规非缓冲channel完全一致的方法，但我们也可&lt;/p&gt;

&lt;p&gt;以使用range关键来实现更为简便的循环读取：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for i := range c {

    fmt.Println(&amp;quot;Received:&amp;quot;, i)

} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-用goroutine模拟生产消费者&#34;&gt;5、用goroutine模拟生产消费者&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

import &amp;quot;time&amp;quot;

func Producer (queue chan&amp;lt;- int){

        for i:= 0; i &amp;lt; 10; i++ {

                queue &amp;lt;- i  

                }

}

func Consumer( queue &amp;lt;-chan int){

        for i :=0; i &amp;lt; 10; i++{

                v := &amp;lt;- queue

                fmt.Println(&amp;quot;receive:&amp;quot;, v)

        }

}

func main(){

        queue := make(chan int, 1)

        go Producer(queue)

        go Consumer(queue)

        time.Sleep(1e9) //让Producer与Consumer完成

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-通过make-创建通道&#34;&gt;6、 通过make 创建通道&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;make(c1 chan int)   创建的是 同步channel ...读写完全对应

make(c1 chan int ,10) 闯进带缓冲的通道 上来可以写10次
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7-随机向通道中写入0或者1&#34;&gt;7、随机向通道中写入0或者1&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

import &amp;quot;time&amp;quot;

func main(){

       ch := make(chan int, 1)

 for {

   ///不停向channel中写入 0 或者1

  select {

   case ch &amp;lt;- 0:

   case ch &amp;lt;- 1:

  }

    //从通道中取出数据

    i := &amp;lt;-ch

    fmt.Println(&amp;quot;Value received:&amp;quot;,i)

    time.Sleep(1e8)

    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-带缓冲的channel&#34;&gt;8、带缓冲的channel&lt;/h2&gt;

&lt;p&gt;之前创建的都是不带缓冲的channel，这种做法对于传递单个数据的场景可以接受，&lt;/p&gt;

&lt;p&gt;但对于需要持续传输大量数据的场景就有些不合适了。接下来我们介绍如何给channel带上缓冲，&lt;/p&gt;

&lt;p&gt;从而达到消息队列的效果。&lt;/p&gt;

&lt;p&gt;要创建一个带缓冲的channel，其实也非常容易：&lt;/p&gt;

&lt;p&gt;c := make(chan int, 1024)&lt;/p&gt;

&lt;p&gt;在调用make()时将缓冲区大小作为第二个参数传入即可，比如上面这个例子就创建了一个大小&lt;/p&gt;

&lt;p&gt;为1024的int类型channel，即使没有读取方，写入方也可以一直往channel里写入，在缓冲区被&lt;/p&gt;

&lt;p&gt;填完之前都不会阻塞。&lt;/p&gt;

&lt;p&gt;从带缓冲的channel中读取数据可以使用与常规非缓冲channel完全一致的方法，但我们也可&lt;/p&gt;

&lt;p&gt;以使用range关键来实现更为简便的循环读取：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for i := range c {

    fmt.Println(&amp;quot;Received:&amp;quot;, i)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;下面是测试代码&lt;/strong&gt;&amp;lsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

import &amp;quot;time&amp;quot;

func A(c chan int){

 for i:=0;i&amp;lt;10;i++{

        c&amp;lt;- i

    }

}

func B(c chan int){

 for val:=range c {

      fmt.Println(&amp;quot;Value:&amp;quot;,val)  

    }

}

func main(){

    chs:=make(chan int,10)

    //只要有通道操作一定要放到goroutine中否则 会堵塞当前的主线程 并且导致程序退出

    //对于同步通道 或者带缓冲的通道 一定要封装成函数 使用 goroutine 包装

    go A(chs)

    go B(chs)

    time.Sleep(1e9)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;9-关于创建多个goroutine具体到go语言会创建多少个线程&#34;&gt;9、关于创建多个goroutine具体到go语言会创建多少个线程&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;os&amp;quot;

func main() {

    for i:=0; i&amp;lt;20; i++ {

        go func() {

            for {

                b:=make([]byte, 10)

                os.Stdin.Read(b) // will block

            }

        }()

    }

    select{}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会产生21个线程：&lt;/p&gt;

&lt;p&gt;runtime scheduler(src/pkg/runtime/proc.c)会维护一个线程池，当某个goroutine被block后，scheduler会创建一个新线程给其他ready的goroutine&lt;/p&gt;

&lt;p&gt;GOMAXPROCS控制的是未被阻塞的所有goroutine被multiplex到多少个线程上运行&lt;/p&gt;

&lt;h2 id=&#34;10-在channel中也是可以传递channel的-go语言的channel和map-slice等一样都是原生类型&#34;&gt;10、在channel中也是可以传递channel的,Go语言的channel和map、slice等一样都是原生类型&lt;/h2&gt;

&lt;p&gt;需要注意的是，在Go语言中channel本身也是一个原生类型，与map之类的类型地位一样，因&lt;/p&gt;

&lt;p&gt;此channel本身在定义后也可以通过channel来传递。&lt;/p&gt;

&lt;p&gt;我们可以使用这个特性来实现*nix上非常常见的管道（pipe）特性。管道也是使用非常广泛&lt;/p&gt;

&lt;p&gt;的一种设计模式，比如在处理数据时，我们可以采用管道设计，这样可以比较容易以插件的方式&lt;/p&gt;

&lt;p&gt;增加数据的处理流程。&lt;/p&gt;

&lt;p&gt;下面我们利用channel可被传递的特性来实现我们的管道。 为了简化表达， 我们假设在管道中&lt;/p&gt;

&lt;p&gt;传递的数据只是一个整型数，在实际的应用场景中这通常会是一个数据块。&lt;/p&gt;

&lt;p&gt;首先限定基本的数据结构：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type PipeData struct {

    value int

    handler func(int) int

    next chan int

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们写一个常规的处理函数。我们只要定义一系列PipeData的数据结构并一起传递给&lt;/p&gt;

&lt;p&gt;这个函数，就可以达到流式处理数据的目的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func handle(queue chan *PipeData) {

for data := range queue {

        data.next &amp;lt;- data.handler(data.value)

    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;11-我们默认创建的是双向通道-单向通道没有意义-但是我们却可以通过强制转换-将双向通道-转换成为单向通道&#34;&gt;11、我们默认创建的是双向通道,单向通道没有意义,但是我们却可以通过强制转换 将双向通道 转换成为单向通道 。&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var ch1 chan int  // ch1是一个正常的channel，不是单向的  

var ch2 chan&amp;lt;- float64// ch2是单向channel，只用于写float64数据

var ch3 &amp;lt;-chan int // ch3是单向channel，只用于读取int数据 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;channel是一个原生类型，因此不仅 支持被传递，还支持类型转换。只有在介绍了单向channel的概念后，读者才会明白类型转换对于&lt;/p&gt;

&lt;p&gt;channel的意义：就是在单向channel和双向channel之间进行转换。&lt;/p&gt;

&lt;p&gt;示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ch4 := make(chan int)

ch5 := &amp;lt;-chan int(ch4) // ch5就是一个单向的读取channel

ch6 := chan&amp;lt;- int(ch4) // ch6 是一个单向的写入channel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基于ch4，我们通过类型转换初始化了两个单向channel：单向读的ch5和单向写的ch6。&lt;/p&gt;

&lt;p&gt;从设计的角度考虑，所有的代码应该都遵循“最小权限原则” ，&lt;/p&gt;

&lt;p&gt;从而避免没必要地使用泛滥问题， 进而导致程序失控。 写过C++程序的读者肯定就会联想起const 指针的用法。非const指针具备const指针的所有功能，将一个指针设定为const就是明确告诉&lt;/p&gt;

&lt;p&gt;函数实现者不要试图对该指针进行修改。单向channel也是起到这样的一种契约作用。&lt;/p&gt;

&lt;p&gt;下面我们来看一下单向channel的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Parse(ch &amp;lt;-chan int) {

for value := range ch {

        fmt.Println(&amp;quot;Parsing value&amp;quot;, value)  

    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除非这个函数的实现者无耻地使用了类型转换，否则这个函数就不会因为各种原因而对ch 进行写，避免在ch中出现非期望的数据，从而很好地实践最小权限原则。&lt;/p&gt;

&lt;h2 id=&#34;12-只读只写单向-channel-代码例子-遵循权限最小化的原则&#34;&gt;12、只读只写单向 channel 代码例子，遵循权限最小化的原则&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

import &amp;quot;time&amp;quot;

//接受一个参数 是只允许读取通道  除非直接强制转换 要么你只能从channel中读取数据

func sCh(ch &amp;lt;-chan int){

   for val:= range ch {

     fmt.Println(val)

   }

}

func main(){

    //创建一个带100缓冲的通道 可以直接写入 而不会导致 主线程堵塞

    dch:=make(chan int,100)

    for i:=0;i&amp;lt;100;i++{

      dch&amp;lt;- i  

    }

    //传递进去 只读通道

    go sCh(dch)

    time.Sleep(1e9)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;13-channel的关闭-以及判断channel的关闭&#34;&gt;13、channel的关闭,以及判断channel的关闭&lt;/h2&gt;

&lt;p&gt;关闭channel非常简单，直接使用Go语言内置的close()函数即可：&lt;/p&gt;

&lt;p&gt;close(ch)&lt;/p&gt;

&lt;p&gt;在介绍了如何关闭channel之后，我们就多了一个问题：如何判断一个channel是否已经被关&lt;/p&gt;

&lt;p&gt;闭？我们可以在读取的时候使用多重返回值的方式：&lt;/p&gt;

&lt;p&gt;x, ok := &amp;lt;-ch&lt;/p&gt;

&lt;p&gt;这个用法与map中的按键获取value的过程比较类似，只需要看第二个bool返回值即可，如&lt;/p&gt;

&lt;p&gt;果返回值是false则表示ch已经被关闭。&lt;/p&gt;

&lt;h2 id=&#34;14-go的多核并行化编程&#34;&gt;14、Go的多核并行化编程&lt;/h2&gt;

&lt;p&gt;高性能并发编程 必须设置GOMAXPROCS 为最大核数目,这个值由runtime.NumCPU()获取&lt;/p&gt;

&lt;p&gt;在执行一些昂贵的计算任务时， 我们希望能够尽量利用现代服务器普遍具备的多核特性来尽&lt;/p&gt;

&lt;p&gt;量将任务并行化，从而达到降低总计算时间的目的。此时我们需要了解CPU核心的数量，并针对&lt;/p&gt;

&lt;p&gt;性地分解计算任务到多个goroutine中去并行运行。&lt;/p&gt;

&lt;p&gt;下面我们来模拟一个完全可以并行的计算任务：计算N个整型数的总和。我们可以将所有整&lt;/p&gt;

&lt;p&gt;型数分成M份，M即CPU的个数。让每个CPU开始计算分给它的那份计算任务，最后将每个CPU&lt;/p&gt;

&lt;p&gt;的计算结果再做一次累加，这样就可以得到所有N个整型数的总和：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Vector []float64

// 分配给每个CPU的计算任务

func (v Vector) DoSome(i, n int, u Vector, c chan int) {

for ; i &amp;lt; n; i++ {

         v[i] += u.Op(v[i])

     }

     c &amp;lt;- 1       

// 发信号告诉任务管理者我已经计算完成了

}

const NCPU = 16     

// 假设总共有16核   

func (v Vector) DoAll(u Vector) {   

    c := make(chan int, NCPU)  // 用于接收每个CPU的任务完成信号   

for i := 0; i &amp;lt; NCPU; i++ {   

go v.DoSome(i*len(v)/NCPU, (i+1)*len(v)/NCPU, u, c)

    } 

// 等待所有CPU的任务完成

for i := 0; i &amp;lt; NCPU; i++ {   

&amp;lt;-c    // 获取到一个数据，表示一个CPU计算完成了

    }

// 到这里表示所有计算已经结束

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两个函数看起来设计非常合理。DoAll()会根据CPU核心的数目对任务进行分割，然后开&lt;/p&gt;

&lt;p&gt;辟多个goroutine来并行执行这些计算任务。&lt;/p&gt;

&lt;p&gt;是否可以将总的计算时间降到接近原来的1/N呢？答案是不一定。如果掐秒表（正常点的话，&lt;/p&gt;

&lt;p&gt;应该用7.8节中介绍的Benchmark方法） ，会发现总的执行时间没有明显缩短。再去观察CPU运行&lt;/p&gt;

&lt;p&gt;状态， 你会发现尽管我们有16个CPU核心， 但在计算过程中其实只有一个CPU核心处于繁忙状态，&lt;/p&gt;

&lt;p&gt;这是会让很多Go语言初学者迷惑的问题。&lt;/p&gt;

&lt;p&gt;官方的答案是，这是当前版本的Go编译器还不能很智能地去发现和利用多核的优势。虽然&lt;/p&gt;

&lt;p&gt;我们确实创建了多个goroutine，并且从运行状态看这些goroutine也都在并行运行，但实际上所有&lt;/p&gt;

&lt;p&gt;这些goroutine都运行在同一个CPU核心上， 在一个goroutine得到时间片执行的时候， 其他goroutine&lt;/p&gt;

&lt;p&gt;都会处于等待状态。从这一点可以看出，虽然goroutine简化了我们写并行代码的过程，但实际上&lt;/p&gt;

&lt;p&gt;整体运行效率并不真正高于单线程程序。&lt;/p&gt;

&lt;p&gt;在Go语言升级到默认支持多CPU的某个版本之前，我们可以先通过设置环境变量&lt;/p&gt;

&lt;p&gt;GOMAXPROCS的值来控制使用多少个CPU核心。具体操作方法是通过直接设置环境变量&lt;/p&gt;

&lt;p&gt;GOMAXPROCS的值，或者在代码中启动goroutine之前先调用以下这个语句以设置使用16个CPU&lt;/p&gt;

&lt;p&gt;核心：&lt;/p&gt;

&lt;p&gt;runtime.GOMAXPROCS(16)&lt;/p&gt;

&lt;p&gt;到底应该设置多少个CPU核心呢，其实runtime包中还提供了另外一个函数NumCPU()来获&lt;/p&gt;

&lt;p&gt;取核心数。可以看到，Go语言其实已经感知到所有的环境信息，下一版本中完全可以利用这些&lt;/p&gt;

&lt;p&gt;信息将goroutine调度到所有CPU核心上，从而最大化地利用服务器的多核计算能力。抛弃&lt;/p&gt;

&lt;p&gt;GOMAXPROCS只是个时间问题。&lt;/p&gt;

&lt;h2 id=&#34;15-主动出让时间片给其他-goroutine-在未来的某一时刻再来执行当前goroutine&#34;&gt;15、主动出让时间片给其他 goroutine 在未来的某一时刻再来执行当前goroutine&lt;/h2&gt;

&lt;p&gt;我们可以在每个goroutine中控制何时主动出让时间片给其他goroutine，这可以使用runtime&lt;/p&gt;

&lt;p&gt;包中的Gosched()函数实现。&lt;/p&gt;

&lt;p&gt;实际上，如果要比较精细地控制goroutine的行为，就必须比较深入地了解Go语言开发包中&lt;/p&gt;

&lt;p&gt;runtime包所提供的具体功能。&lt;/p&gt;

&lt;h2 id=&#34;16-go中的同步&#34;&gt;16、Go中的同步&lt;/h2&gt;

&lt;p&gt;倡导用通信来共享数据，而不是通过共享数据来进行通信，但考虑&lt;/p&gt;

&lt;p&gt;到即使成功地用channel来作为通信手段，还是避免不了多个goroutine之间共享数据的问题，Go&lt;/p&gt;

&lt;p&gt;语言的设计者虽然对channel有极高的期望，但也提供了妥善的资源锁方案。&lt;/p&gt;

&lt;h2 id=&#34;17-go中的同步锁&#34;&gt;17、Go中的同步锁&lt;/h2&gt;

&lt;p&gt;倡导用通信来共享数据，而不是通过共享数据来进行通信，但考虑&lt;/p&gt;

&lt;p&gt;到即使成功地用channel来作为通信手段，还是避免不了多个goroutine之间共享数据的问题，Go&lt;/p&gt;

&lt;p&gt;语言的设计者虽然对channel有极高的期望，但也提供了妥善的资源锁方案。&lt;/p&gt;

&lt;p&gt;对于这两种锁类型， 任何一个Lock()或RLock()均需要保证对应有Unlock()或RUnlock()&lt;/p&gt;

&lt;p&gt;调用与之对应，否则可能导致等待该锁的所有goroutine处于饥饿状态，甚至可能导致死锁。锁的&lt;/p&gt;

&lt;p&gt;典型使用模式如下：&lt;/p&gt;

&lt;p&gt;var l sync.Mutex&lt;/p&gt;

&lt;p&gt;func foo() {&lt;/p&gt;

&lt;p&gt;l.Lock()&lt;/p&gt;

&lt;p&gt;//延迟调用 在函数退出 并且局部资源被释放的时候 调用&lt;/p&gt;

&lt;p&gt;defer l.Unlock()&lt;/p&gt;

&lt;p&gt;//&amp;hellip;&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;这里我们再一次见证了Go语言defer关键字带来的优雅&lt;/p&gt;

&lt;h2 id=&#34;18-全局唯一操作-sync-once-do-sync-atomic原子操作子包&#34;&gt;18、全局唯一操作 sync.Once.Do()     sync.atomic原子操作子包&lt;/h2&gt;

&lt;p&gt;对于从全局的角度只需要运行一次的代码，比如全局初始化操作，Go语言提供了一个Once&lt;/p&gt;

&lt;p&gt;类型来保证全局的唯一性操作，具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var a string

var once sync.Once  

func setup() {

a = &amp;quot;hello, world&amp;quot;

}  

func doprint() {

once.Do(setup)

print(a)  

}  

func twoprint() {

go doprint()

go doprint()  

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果这段代码没有引入Once， setup()将会被每一个goroutine先调用一次， 这至少对于这个&lt;/p&gt;

&lt;p&gt;例子是多余的。在现实中，我们也经常会遇到这样的情况。Go语言标准库为我们引入了Once类&lt;/p&gt;

&lt;p&gt;型以解决这个问题。once的Do()方法可以保证在全局范围内只调用指定的函数一次（这里指&lt;/p&gt;

&lt;p&gt;setup()函数） ，而且所有其他goroutine在调用到此语句时，将会先被阻塞，直至全局唯一的&lt;/p&gt;

&lt;p&gt;once.Do()调用结束后才继续。&lt;/p&gt;

&lt;p&gt;这个机制比较轻巧地解决了使用其他语言时开发者不得不自行设计和实现这种Once效果的&lt;/p&gt;

&lt;p&gt;难题，也是Go语言为并发性编程做了尽量多考虑的一种体现。&lt;/p&gt;

&lt;p&gt;如果没有once.Do()，我们很可能只能添加一个全局的bool变量，在函数setup()的最后&lt;/p&gt;

&lt;p&gt;一行将该bool变量设置为true。在对setup()的所有调用之前，需要先判断该bool变量是否已&lt;/p&gt;

&lt;p&gt;经被设置为true，如果该值仍然是false，则调用一次setup()，否则应跳过该语句。实现代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var done bool = false

func setup() {

a = &amp;quot;hello, world&amp;quot; 

done = true

}     

func doprint() { 

if !done {

        setup()

    }   

print(a)  

}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码初看起来比较合理， 但是细看还是会有问题， 因为setup()并不是一个原子性操作，&lt;/p&gt;

&lt;p&gt;这种写法可能导致setup()函数被多次调用，从而无法达到全局只执行一次的目标。这个问题的&lt;/p&gt;

&lt;p&gt;复杂性也更加体现了Once类型的价值。&lt;/p&gt;

&lt;p&gt;为了更好地控制并行中的原子性操作，sync包中还包含一个atomic子包，它提供了对于一&lt;/p&gt;

&lt;p&gt;些基础数据类型的原子操作函数，比如下面这个函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CompareAndSwapUint64(val *uint64, old, new uint64) (swapped bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就提供了比较和交换两个uint64类型数据的操作。这让开发者无需再为这样的操作专门添加Lock操作。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lib.csdn.net/article/53/36140?knId=1441&#34;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloud Native Go - 基于Go和React的web云服务构建指南</title>
      <link>http://rootsongjc.github.io/talks/cloud-native-go/</link>
      <pubDate>Fri, 03 Mar 2017 17:29:54 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/cloud-native-go/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20160326003.jpg&#34; alt=&#34;北京植物园桃花&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(题图：北京植物园桃花 Mar 26,2016)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近在翻译Kevin Hoffman和Dan Nemeth的书《Cloud Native Go - 基于Go和React的web云服务构建指南》。目前已经完成图书的粗译，格式调整和排版，正在调整校对，预计本月将完成。本书将由&lt;strong&gt;电子工业出版社&lt;/strong&gt;出版。&lt;/p&gt;

&lt;p&gt;下面先罗列下目录，以飨读者。&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;Cloud Native Go. 1&lt;/p&gt;

&lt;p&gt;构建基于Go和React的云原生Web应用&amp;hellip; 1&lt;/p&gt;

&lt;p&gt;云服务构建完全指南&amp;hellip; 1&lt;/p&gt;

&lt;p&gt;目录&amp;hellip; 4&lt;/p&gt;

&lt;p&gt;前言&amp;hellip; 8&lt;/p&gt;

&lt;p&gt;关于作者&amp;hellip; 9&lt;/p&gt;

&lt;p&gt;致谢&amp;hellip; 9&lt;/p&gt;

&lt;h3 id=&#34;第1章-云之道-10&#34;&gt;第1章        云之道&amp;hellip; 10&lt;/h3&gt;

&lt;p&gt;云的优势&amp;hellip; 10&lt;/p&gt;

&lt;p&gt;崇尚简洁&amp;hellip; 11&lt;/p&gt;

&lt;p&gt;测试优先，测试一切&amp;hellip; 11&lt;/p&gt;

&lt;p&gt;尽早发布, 频繁发布&amp;hellip; 12&lt;/p&gt;

&lt;p&gt;自动化一切&amp;hellip; 13&lt;/p&gt;

&lt;p&gt;建立服务生态系统&amp;hellip; 13&lt;/p&gt;

&lt;p&gt;为什么使用GO?. 14&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 15&lt;/p&gt;

&lt;h3 id=&#34;第2章-开始-16&#34;&gt;第2章        开始… 16&lt;/h3&gt;

&lt;p&gt;正确的工具&amp;hellip; 16&lt;/p&gt;

&lt;p&gt;配置Git 16&lt;/p&gt;

&lt;p&gt;建立Go. 18&lt;/p&gt;

&lt;p&gt;配置您的Go工作区&amp;hellip; 18&lt;/p&gt;

&lt;p&gt;检查环境&amp;hellip; 19&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 19&lt;/p&gt;

&lt;h3 id=&#34;第3章-go入门-20&#34;&gt;第3章        Go入门&amp;hellip; 20&lt;/h3&gt;

&lt;p&gt;建立Hello Cloud. 20&lt;/p&gt;

&lt;p&gt;使用基本函数&amp;hellip; 21&lt;/p&gt;

&lt;p&gt;使用结构体&amp;hellip; 23&lt;/p&gt;

&lt;p&gt;介绍Go接口&amp;hellip; 24&lt;/p&gt;

&lt;p&gt;向结构体添加方法&amp;hellip; 24&lt;/p&gt;

&lt;p&gt;Go中的接口动态类型检查&amp;hellip; 25&lt;/p&gt;

&lt;p&gt;使用第三方包&amp;hellip; 27&lt;/p&gt;

&lt;p&gt;创建自己的包&amp;hellip; 28&lt;/p&gt;

&lt;p&gt;导出函数和数据&amp;hellip; 28&lt;/p&gt;

&lt;p&gt;创建包&amp;hellip; 28&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 30&lt;/p&gt;

&lt;h3 id=&#34;第4章-持续交付-31&#34;&gt;第4章        持续交付&amp;hellip; 31&lt;/h3&gt;

&lt;p&gt;Docker介绍&amp;hellip; 31&lt;/p&gt;

&lt;p&gt;为什么要使用Docker？&amp;hellip; 31&lt;/p&gt;

&lt;p&gt;安装Docker 32&lt;/p&gt;

&lt;p&gt;运行Docker镜像&amp;hellip; 33&lt;/p&gt;

&lt;p&gt;与Wercker的持续集成&amp;hellip; 33&lt;/p&gt;

&lt;p&gt;持续集成最佳实践&amp;hellip; 34&lt;/p&gt;

&lt;p&gt;为什么使用Wercker？&amp;hellip; 34&lt;/p&gt;

&lt;p&gt;安装Wercker CLI 36&lt;/p&gt;

&lt;p&gt;创建Wercker配置文件&amp;hellip; 36&lt;/p&gt;

&lt;p&gt;使用Wercker进行构建&amp;hellip; 40&lt;/p&gt;

&lt;p&gt;部署到DockerHub. 41&lt;/p&gt;

&lt;p&gt;读者练习：创建完整的开发管道&amp;hellip; 42&lt;/p&gt;

&lt;p&gt;高级挑战：集成第三方库&amp;hellip; 42&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 43&lt;/p&gt;

&lt;h3 id=&#34;第5章-在go中构建微服务-44&#34;&gt;第5章        在Go中构建微服务&amp;hellip; 44&lt;/h3&gt;

&lt;p&gt;设计API First的服务&amp;hellip; 44&lt;/p&gt;

&lt;p&gt;通过Apiary测试和发布文档&amp;hellip; 46&lt;/p&gt;

&lt;p&gt;架设微服务&amp;hellip; 46&lt;/p&gt;

&lt;p&gt;构建Test First的服务&amp;hellip; 48&lt;/p&gt;

&lt;p&gt;创建第一个失败测试&amp;hellip; 49&lt;/p&gt;

&lt;p&gt;测试Location Header 51&lt;/p&gt;

&lt;p&gt;壮丽的蒙太奇 - 迭代测试&amp;hellip; 52&lt;/p&gt;

&lt;p&gt;在云中部署和运行&amp;hellip; 53&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 55&lt;/p&gt;

&lt;h3 id=&#34;第6章-运用后端服务-56&#34;&gt;第6章        运用后端服务&amp;hellip; 56&lt;/h3&gt;

&lt;p&gt;设计服务系统&amp;hellip; 56&lt;/p&gt;

&lt;p&gt;测试优先构建依赖服务&amp;hellip; 57&lt;/p&gt;

&lt;p&gt;构建Fulfillment服务&amp;hellip; 57&lt;/p&gt;

&lt;p&gt;构建Catalog服务&amp;hellip; 60&lt;/p&gt;

&lt;p&gt;在服务之间共享结构化数据&amp;hellip; 64&lt;/p&gt;

&lt;p&gt;使用服务捆绑去外部化地址与元数据&amp;hellip; 65&lt;/p&gt;

&lt;p&gt;服务发现&amp;hellip; 67&lt;/p&gt;

&lt;p&gt;读者练习&amp;hellip; 69&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 70&lt;/p&gt;

&lt;h3 id=&#34;第7章-构建数据服务-71&#34;&gt;第7章        构建数据服务&amp;hellip; 71&lt;/h3&gt;

&lt;p&gt;构建MongoDB存储库&amp;hellip; 71&lt;/p&gt;

&lt;p&gt;集成测试一个Mongo-Backed服务&amp;hellip; 76&lt;/p&gt;

&lt;p&gt;在云中运行&amp;hellip; 80&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 81&lt;/p&gt;

&lt;h3 id=&#34;第8章-事件源和cqrs-83&#34;&gt;第8章        事件源和CQRS.. 83&lt;/h3&gt;

&lt;p&gt;现实源自事件&amp;hellip; 83&lt;/p&gt;

&lt;p&gt;最终还是一致的&amp;hellip; 85&lt;/p&gt;

&lt;p&gt;介绍命令查询责任分离&amp;hellip; 86&lt;/p&gt;

&lt;p&gt;事件源案例&amp;hellip; 87&lt;/p&gt;

&lt;p&gt;代码示例：管理无人机军队&amp;hellip; 88&lt;/p&gt;

&lt;p&gt;构建命令处理程序服务&amp;hellip; 88&lt;/p&gt;

&lt;p&gt;构建事件处理器&amp;hellip; 92&lt;/p&gt;

&lt;p&gt;构建查询处理程序服务&amp;hellip; 95&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 96&lt;/p&gt;

&lt;h3 id=&#34;第9章-使用go构建web应用程序-97&#34;&gt;第9章 使用Go构建web应用程序&amp;hellip; 97&lt;/h3&gt;

&lt;p&gt;处理静态文件和资产&amp;hellip; 97&lt;/p&gt;

&lt;p&gt;支持javascript客户端&amp;hellip; 98&lt;/p&gt;

&lt;p&gt;使用服务端模板&amp;hellip; 100&lt;/p&gt;

&lt;p&gt;处理表单&amp;hellip; 102&lt;/p&gt;

&lt;p&gt;使用Cookie和会话状态&amp;hellip; 102&lt;/p&gt;

&lt;p&gt;使用Wercker构建和部署&amp;hellip; 104&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 105&lt;/p&gt;

&lt;h3 id=&#34;第10章-云安全-106&#34;&gt;第10章 云安全&amp;hellip; 106&lt;/h3&gt;

&lt;p&gt;保护一个web应用程序&amp;hellip; 106&lt;/p&gt;

&lt;p&gt;保护微服务&amp;hellip; 111&lt;/p&gt;

&lt;p&gt;隐私和数据安全&amp;hellip; 113&lt;/p&gt;

&lt;p&gt;阅读练习&amp;hellip; 114&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 115&lt;/p&gt;

&lt;h3 id=&#34;第11章-使用websockets-116&#34;&gt;第11章 使用WebSockets. 116&lt;/h3&gt;

&lt;p&gt;解析WebSockets. 116&lt;/p&gt;

&lt;p&gt;WebSockets和云的诞生&amp;hellip; 117&lt;/p&gt;

&lt;p&gt;使用消息传递提供程序构建WebSocket应用程序&amp;hellip; 119&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 122&lt;/p&gt;

&lt;h3 id=&#34;第12章-使用react构建web视图-123&#34;&gt;第12章 使用React构建web视图… 123&lt;/h3&gt;

&lt;p&gt;JavaScript State of the Union JavaScript  . 123&lt;/p&gt;

&lt;p&gt;为什么选择React？&amp;hellip; 123&lt;/p&gt;

&lt;p&gt;React应用程序的解剖&amp;hellip; 125&lt;/p&gt;

&lt;p&gt;构建一个简单的React应用程序&amp;hellip; 127&lt;/p&gt;

&lt;p&gt;测试React应用程序&amp;hellip; 132&lt;/p&gt;

&lt;p&gt;进一步阅读&amp;hellip; 132&lt;/p&gt;

&lt;p&gt;总结. 133&lt;/p&gt;

&lt;h3 id=&#34;第13章-使用flux构建高可扩展性ui-134&#34;&gt;第13章      使用Flux构建高可扩展性UI 134&lt;/h3&gt;

&lt;p&gt;Flux介绍&amp;hellip; 134&lt;/p&gt;

&lt;p&gt;创建Flux应用程序&amp;hellip; 136&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 141&lt;/p&gt;

&lt;h3 id=&#34;第14章-创建完整应用world-of-fluxcraft-143&#34;&gt;第14章      创建完整应用World of FluxCraft 143&lt;/h3&gt;

&lt;p&gt;World of FluxCraft介绍&amp;hellip; 143&lt;/p&gt;

&lt;p&gt;架构概览&amp;hellip; 145&lt;/p&gt;

&lt;p&gt;Flux GUI 146&lt;/p&gt;

&lt;p&gt;命令处理&amp;hellip; 148&lt;/p&gt;

&lt;p&gt;事件处理&amp;hellip; 149&lt;/p&gt;

&lt;p&gt;维持现实服务的状态&amp;hellip; 149&lt;/p&gt;

&lt;p&gt;地图管理&amp;hellip; 150&lt;/p&gt;

&lt;p&gt;自动验收测试&amp;hellip; 150&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 151&lt;/p&gt;

&lt;h3 id=&#34;第15章-结论-152&#34;&gt;第15章     结论&amp;hellip; 152&lt;/h3&gt;

&lt;p&gt;我们学到了什么？&amp;hellip; 152&lt;/p&gt;

&lt;p&gt;下一步&amp;hellip; 153&lt;/p&gt;

&lt;h3 id=&#34;a云应用的故障排查-154&#34;&gt;A云应用的故障排查… 154&lt;/h3&gt;

&lt;p&gt;使用日志流&amp;hellip; 154&lt;/p&gt;

&lt;p&gt;健康和性能监控&amp;hellip; 154&lt;/p&gt;

&lt;p&gt;在云中调试应用程序&amp;hellip; 155&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>