<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Jimmy Song&#39;s Blog</title>
    <link>http://rootsongjc.github.io/tags/coding/</link>
    <description>Recent content in Coding on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Mar 2017 08:36:29 +0800</lastBuildDate>
    
	<atom:link href="http://rootsongjc.github.io/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言中的并发编程总结</title>
      <link>http://rootsongjc.github.io/projects/golang-concurrency-summary/</link>
      <pubDate>Fri, 24 Mar 2017 08:36:29 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/golang-concurrency-summary/</guid>
      <description>Go语言并发编程总结  Golang :不要通过共享内存来通信，而应该通过通信来共享内存。这句风靡在Go社区的话,说的就是 goroutine中的 channel。他在go并发编程中充当着类型安全的管道作用。
 1、通过golang中的 goroutine 与sync.Mutex进行并发同步 import( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;runtime&amp;quot; ) var count int =0; func counter(lock * sync.Mutex){ lock.Lock() count++ fmt.Println(count) lock.Unlock() } func main(){ lock:=&amp;amp;sync.Mutex{} for i:=0;i&amp;lt;10;i++{ //传递指针是为了防止 函数内的锁和 调用锁不一致 go counter(lock) } for{ lock.Lock() c:=count lock.Unlock() ///把时间片给别的goroutine 未来某个时刻运行该routine runtime.Gosched() if c&amp;gt;=10{ fmt.Println(&amp;quot;goroutine end&amp;quot;) break } } }  2、goroutine之间通过 channel进行通信 channel是和类型相关的 可以理解为 是一种类型安全的管道。
简单的channel 使用
package main import &amp;quot;fmt&amp;quot; func Count(ch chan int) { ch &amp;lt;- 1 fmt.</description>
    </item>
    
  </channel>
</rss>