<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Jimmy Song&#39;s Blog</title>
    <link>http://rootsongjc.github.io/projects/</link>
    <description>Recent content in Projects on Jimmy Song&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jul 2017 11:21:14 +0800</lastBuildDate>
    
	<atom:link href="http://rootsongjc.github.io/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Awesome Cloud Native</title>
      <link>http://rootsongjc.github.io/projects/awesome-cloud-native/</link>
      <pubDate>Tue, 18 Jul 2017 11:21:14 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/awesome-cloud-native/</guid>
      <description>这是一份记录关于Cloud Native的软件、工具、架构以及参考资料的列表，是我在GitHub上开的一个项目，地址是 https://github.com/rootsongjc/awesome-cloud-native
初步划分成以下这些领域：
Awesome Cloud Native
 AI
 API
 Containers
 CI-CD
 Database
 Data Science
 Fault tolerant
 Logging
 Message broker
 Monitoring
 Networking
 Orchestration and scheduler
 Portability
 Proxy and load balancer
 Security
 Service mesh
 Service registry and discovery
 Serverless
 Storage
 Tracing
 Tools
 Tutorial
  今后会不断更新和完善该列表，不仅是为了本人平时的研究记录，也作为Cloud Native 业内人士的参考。</description>
    </item>
    
    <item>
      <title>Kubernetes Handbook发起</title>
      <link>http://rootsongjc.github.io/projects/kubernetes-handbook-startup/</link>
      <pubDate>Fri, 14 Apr 2017 19:33:27 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/kubernetes-handbook-startup/</guid>
      <description>（题图：地坛公园 Sep 27,2015）
玩转Kubernetes，我就看kubernetes handbook！
GitHub地址：https://github.com/rootsongjc/kubernetes-handbook
文章同步更新到gitbook，方便大家浏览和下载PDF。
说明 文中涉及的配置文件和代码链接在gitbook中会无法打开，请下载github源码后，在MarkDown编辑器中打开，点击链接将跳转到你的本地目录。
如何使用 方式一：在线浏览
访问gitbook：https://www.gitbook.com/book/rootsongjc/kubernetes-handbook/
方式二：本地查看
 将代码克隆到本地 安装gitbook：Setup and Installation of GitBook 执行gitbook serve 在浏览器中访问http://localhost:4000  P.S 本书中也将记录业界动态和经验分享，欢迎分享你的独到见解。
加入Kubernetes交流群，请添加我微信jimmysong。</description>
    </item>
    
    <item>
      <title>Kubernetes1.6集群部署完全指南 ——二进制文件部署开启TLS基于CentOS7发布</title>
      <link>http://rootsongjc.github.io/projects/kubernetes-installation-document/</link>
      <pubDate>Thu, 13 Apr 2017 14:00:04 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/kubernetes-installation-document/</guid>
      <description>（题图：清晨@首都机场 Aug 13,2016）
这可能是目前为止最详细的kubernetes安装文档了。
经过几天的安装、调试、整理，今天该文档终于发布了。
你可以在这里看到文档和配置文件和我一步步部署 kubernetes1.6 集群。
或者直接下载pdf版本（2.92M）。
Kubernetes的安装繁琐，步骤复杂，该文档能够帮助跳过很多坑，节约不少时间，我在本地环境上已经安装完成，有问题欢迎在GitHub上提issue。
安装的集群详情
 Kubernetes 1.6.0 Docker 1.12.5（使用yum安装） Etcd 3.1.5 Flanneld 0.7 vxlan 网络 TLS 认证通信 (所有组件，如 etcd、kubernetes master 和 node) RBAC 授权 kublet TLS BootStrapping kubedns、dashboard、heapster(influxdb、grafana)、EFK(elasticsearch、fluentd、kibana) 集群插件 私有docker镜像仓库harbor（请自行部署，harbor提供离线安装包，直接使用docker-compose启动即可）  该文档中包括以下几个步骤
 创建 TLS 通信所需的证书和秘钥 创建 kubeconfig 文件 创建三节点的高可用 etcd 集群 kubectl命令行工具 部署高可用 master 集群 部署 node 节点 kubedns 插件 Dashboard 插件 Heapster 插件 EFK 插件  </description>
    </item>
    
    <item>
      <title>容器技术在大数据场景下的应用——Yarn on Docker</title>
      <link>http://rootsongjc.github.io/projects/yarn-on-docker/</link>
      <pubDate>Tue, 04 Apr 2017 00:19:04 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/yarn-on-docker/</guid>
      <description>作者：宋净超 TalkingData云计算及大数据工程师
前言 我已就该话题已在2016年上海Qcon上发表过演讲，点此观看。
另外InfoQ网站上的文字版数据中心的Yarn on Docker集群方案，即本文。
项目代码开源在Github上：Magpie
当前数据中心存在的问题 数据中心中的应用一般独立部署，为了保证环境隔离与方便管理，保证应用最大资源 数据中心中普遍存在如下问题：
1.主机资源利用率低
2.部署和扩展复杂
3.资源隔离无法动态调整
4.无法快速响应业务
为何使用Yarnon Docker
彻底隔离队列 
• 为了合理利用Hadoopyarn的资源，队列间会互相抢占计算资源，造成重要任务阻塞
• 根据部门申请的机器数量划分Yarn集群方便财务管理
• 更细粒度的资源分配 统一的资源分配
• 每个NodeManager和容器都可以限定CPU、内存资源
• Yarn资源划分精确到CPU核数和内存大小 弹性伸缩性服务
• 每个容器中运行一个NodeManager，增减yarn资源只需增减容器个数
• 可以指定每个NodeManager拥有的计算资源多少，按需申请资源 给我们带来什么好处？  Swarm统一集群资源调度
 • 统一资源
• 增加Docker虚拟化层，降低运维成本
增加Hadoop集群资源利用率
• Fordatacenter：避免了静态资源隔离
• Forcluster：加强集群内部资源隔离
 系统架构  比如数据中心中运行的Hadoop集群，我们将HDFS依然运行在物理机上，即DataNode依然部署在实体机器上，将Yarn计算层运行在Docker容器中，整个系统使用二层资源调度，Spark、Flinek、MapReduce等应用运行在Yarn上。
  Swarm调度最底层的主机硬件资源，CPU和内存封装为Docker容器，容器中运行NodeManager，提供给Yarn集群，一个Swarm集群中可以运行多个Yarn集群，形成圈地式的Yarn计算集群。
具体流程
1.swarm node向swarm master注册主机资源并加入到swarmcluster中
2.swarm master向cluster申请资源请求启动容器
3.swarm根据调度策略选择在某个node上启动dockercontainer
4.swarm node的docker deamon根据容器启动参数启动相应资源大小的NodeManager
5.NodeManager自动向YARN的ResourceManager注册资源一个NodeManager资源添加完成。
 Swarm为数据中心做容器即主机资源调度，每个swarmnode的节点结构如图：
一个Swarmnode就是一台物理机，每台主机上可以起多个同类型的dockercontainer，每个container的资源都有限制包括CPU、内存NodeManager容器只需要考虑本身进程占用的资源和需要给主机预留资源。假如主机是24核64G，我们可以分给一个容器5核12G，NodeManager占用4核10G的资源提供给Yarn。</description>
    </item>
    
    <item>
      <title>Go语言中的并发编程总结</title>
      <link>http://rootsongjc.github.io/projects/golang-concurrency-summary/</link>
      <pubDate>Fri, 24 Mar 2017 08:36:29 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/golang-concurrency-summary/</guid>
      <description>Go语言并发编程总结  Golang :不要通过共享内存来通信，而应该通过通信来共享内存。这句风靡在Go社区的话,说的就是 goroutine中的 channel。他在go并发编程中充当着类型安全的管道作用。
 1、通过golang中的 goroutine 与sync.Mutex进行并发同步 import( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;runtime&amp;quot; ) var count int =0; func counter(lock * sync.Mutex){ lock.Lock() count++ fmt.Println(count) lock.Unlock() } func main(){ lock:=&amp;amp;sync.Mutex{} for i:=0;i&amp;lt;10;i++{ //传递指针是为了防止 函数内的锁和 调用锁不一致 go counter(lock) } for{ lock.Lock() c:=count lock.Unlock() ///把时间片给别的goroutine 未来某个时刻运行该routine runtime.Gosched() if c&amp;gt;=10{ fmt.Println(&amp;quot;goroutine end&amp;quot;) break } } }  2、goroutine之间通过 channel进行通信 channel是和类型相关的 可以理解为 是一种类型安全的管道。
简单的channel 使用
package main import &amp;quot;fmt&amp;quot; func Count(ch chan int) { ch &amp;lt;- 1 fmt.</description>
    </item>
    
    <item>
      <title>Docker技术选型</title>
      <link>http://rootsongjc.github.io/projects/docker-tech-selection/</link>
      <pubDate>Wed, 08 Mar 2017 10:37:01 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/docker-tech-selection/</guid>
      <description>回顾历史  多少次我回过头看看走过的路，你还在小村旁。
 去年基于docker1.11对Hadoop yarn进行了docker化改造，详情请看大数据集群虚拟化-Yarn on docker始末，我将这个事件命名为magpie，因为它就像是喜鹊一样收集着各种各样的资源搭建自己的小窝。magpie还是有很多事情可以做的，大数据集群的虚拟化也不会止步，它仅仅是对其做了初步的探索，对于资源利用率和管理方面的优化还有很长的路要走，Yarn本身就是做为大数据集群的资源管理调度角色出现的，一开始是为调度MapReduce，后来的spark、hive、tensrflow、HAWQ、slide等等不一而足陆续出现。但是用它来管理docker似乎还是有点过重，还不如用kubernetes、marathon、nomad、swarm等。
但是在微服务方面docker1.11的很多弊端或者说缺点就暴露了出来，首先docker1.11原生并不带cluster管理，需要配合·docker swarm、kubernetes、marathon等才能管理docker集群。之前的对于docker的使用方式基本就是按照虚拟机的方式使用的，固定IP有悖于微服务的原则。
我们基于docker1.11和shrike二层网络模式，还有shipyard来做集群管理，shipyard只是一个简单的docker集群管理的WebUI，基本都是调用docker API，唯一做了一点docker原生没有的功能就是scale容器，而且只支持到docker1.11，早已停止开发。我抛弃了shipyard，它的页面功能基本可有可无，我自己开发的magpie一样可以管理yarn on docker集群。
Docker Swarm有如下几个缺点
 对于大规模集群的管理效率太低，当管理上百个node的时候经常出现有节点状态不同步的问题，比如主机重启后容器已经Exited了，但是master让然认为是Running状态，必须重启所有master节点才行。 没有中心化Node管理功能，必须登录到每台node上手动启停swarm-agent。 集群管理功能实在太太太简陋，查看所有node状态只能用docker info而且那个格式就不提了，shipyard里有处理这个格式的代码，我copy到了magpie里，彻底抛弃shipyard了。 Docker swarm的集群管理概念缺失，因为docker一开始设计的时候就不是用来管理集群的，所以出现了swarm，但是只能使用docker-compose来编排服务，但是无法在swarm集群中使用我们自定义的mynet网络，compose issue-4233，compose也已经被docker官方废弃（最近一年docker发展的太快了，原来用python写的compose已经被用go重构为libcompose直接集成到swarm mode里了），而且docker1.11里也没有像kubernetes那样service的单位，在docker1.11所有的管理都是基于docker容器的。  Docker Swarm的问题也是shipyard的问题，谁让shipyard直接调用docker的API呢。当然，在后续版本的docker里以上问题都已经不是问题，docker已经越来越像kubernetes，不论是在设计理念上还是在功能上，甚至还发行了企业版，以后每个月发布一个版本。
技术选型 主要对比Docker1.11和Docker17.03-ce版本。
首先有一点需要了解的是，docker1.12+带来的swarm mode，你可以使用一个命令直接启动一个复杂的stack，其中包括了服务编排和所有的服务配置，这是一个投票应用的例子。
下表对比了docker1.11和docker17.03-ce
   版本 docker1.11 docker17.03-ce     基本单位 docker容器 docker容器、service、stack   服务编排 compose，不支持docker swarm的mynet网络 改造后的compose，支持stack中完整的服务编排   网络模型 Host、bridge、overlay、mynet 默认支持跨主机的overlay网络，创建单个容器时也可以attach到已有的overla网络中   插件 没有插件管理命令，但是可以手动创建和管理 有插件管理命令，可以手动创建和从docker hub中下载，上传插件到自己的私有镜像仓库   升级 不支持平滑升级，重启docker原来的容器也会停掉 可以停止docker engine但不影响已启动的容器   弹性伸缩 不支持 service内置功能   服务发现 监听docker event增删DNS 内置服务发现，根据DNS负载均衡   节点管理 手动启停 中心化管理node节点   服务升级 手动升级 service内置功能   负载均衡 本身不支持 Swarm mode内部DNS轮寻    基于以上对比，使用docker17.</description>
    </item>
    
    <item>
      <title>My github pages</title>
      <link>http://rootsongjc.github.io/projects/my-github-pages/</link>
      <pubDate>Wed, 22 Feb 2017 16:56:04 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/projects/my-github-pages/</guid>
      <description> My Open Source Project  Magpie - Magpie is a command line tool for deploying and managing Yarn on Docker cluster. Docker IPAM plugin - Docker network plugin to make a L2 flat network. Docker practice - Docker in practice Go practice - Go in practice Linux practice - Linux in practice :) Team management - About team management  </description>
    </item>
    
  </channel>
</rss>