<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talks on Jimmy&#39;s blog</title>
    <link>http://rootsongjc.github.io/talks/index.xml</link>
    <description>Recent content in Talks on Jimmy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Mar 2017 22:08:25 +0800</lastBuildDate>
    <atom:link href="http://rootsongjc.github.io/talks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>零基础使用Hugo和GitHub Pages创建自己的博客</title>
      <link>http://rootsongjc.github.io/talks/building-github-pages-with-hugo/</link>
      <pubDate>Fri, 17 Mar 2017 22:08:25 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/building-github-pages-with-hugo/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20151005061.jpg&#34; alt=&#34;鹰&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（题图：🦅 北京动物园 Oct 5,2015）&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;亲，你还在为虚拟主机、域名、空间而发愁吗？你想拥有自己的网站吗？你想拥有一个分享知识、留住感动，为开源事业而奋斗终身吗？那么赶快拿起你手中的📱拨打&lt;del&gt;16899168&lt;/del&gt;，不对，是看这篇文章吧，不用998，也不用168，这一切都是免费的，是的&lt;strong&gt;你没看错，真的不要钱！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;

&lt;p&gt;当然还是需要你有一点电脑基础的，会不会编程不要紧，还要会一点英文，你需要先申请一下几个账号和安装一些软件环境：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.github.com&#34;&gt;GitHub&lt;/a&gt; &lt;strong&gt;这是必需的&lt;/strong&gt;，因为你需要使用&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;来托管你的网站。而且你还需要安装git工具。创建一个以自己用户名命名的username.github.io的project。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.qiniu.com/&#34;&gt;七牛云存储&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，为了存储文件方便，建议申请一个，免费10G的存储空间，存储照片和一些小文件是足够的，可以用来做外链，方便存储和管理，这样你就不用把图片也托管到Github上了。流量也是不限的。我没有收七牛的一点好处，以为是我自己用的，所以推荐给大家，七牛还有命令行客户端，方便你上传和同步文件。如上的题图都是存储在七牛云中的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;tongji.baidu.com&#34;&gt;百度统计&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，基本的网站数据分析，免费的，质量还行。还有微信公众号可以查看，这一点我发现腾讯分析居然都没有微信公众号，自家的产品咋都不推出微信客户端呢。顺便提一下，这个统计账号跟你的百度账号不是同一个东西，两者是两套体系，当然你可以和自己的百度账号关联。只需要在Web的Header中植入一段JS代码即可。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; &lt;strong&gt;必需的&lt;/strong&gt;，静态网站生成工具，用来编译静态网站的。跟Hexo比起来我更喜欢这个工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://typora.io/&#34;&gt;Typro&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，但是强烈推荐，我最喜欢的免费的Markdown编辑器，hugo可以编译markdown格式为HTML，所以用它来写博客是最合适不过了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好了注册好Github后你现在可以尽情的玩耍了！😄&lt;/p&gt;

&lt;h2 id=&#34;let-s-rock-roll&#34;&gt;Let&amp;rsquo;s rock&amp;amp;roll!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;首先介绍下Hugo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugo是一种通用的网站框架。严格来说，Hugo应该被称作静态网站生成器。&lt;/p&gt;

&lt;p&gt;静态网站生成器从字面上来理解，就是将你的内容生成静态网站。所谓“静态”的含义其实反映在网站页面的生成的时间。一般的web服务器（WordPress, Ghost, Drupal等等）在收到页面请求时，需要调用数据库生成页面（也就是HTML代码），再返回给用户请求。而静态网站则不需要在收到请求后生成页面，而是在整个网站建立起之前就将所有的页面全部生成完成，页面一经生成便称为静态文件，访问时直接返回现成的静态页面，不需要数据库的参与。&lt;/p&gt;

&lt;p&gt;采用静态网站的维护也相当简单，实际上你根本不需要什么维护，完全不用考虑复杂的运行时间，依赖和数据库的问题。再有也不用担心安全性的问题，没有数据库，网站注入什么的也无从下手。&lt;/p&gt;

&lt;p&gt;静态网站最大好处就是访问快速，不用每次重新生成页面。当然，一旦网站有任何更改，静态网站生成器需要重新生成所有的与更改相关的页面。然而对于小型的个人网站，项目主页等等，网站规模很小，重新生成整个网站也是非常快的。Hugo在速度方面做得非常好，Dan Hersam在他这个&lt;a href=&#34;https://www.udemy.com/build-static-sites-in-seconds-with-hugo/&#34;&gt;Hugo教程&lt;/a&gt;里提到，5000篇文章的博客，Hugo生成整个网站只花了6秒，而很多其他的静态网站生成器则需要几分钟的时间。我的博客目前文章只有几十篇，用Hugo生成整个网站只需要0.1秒。官方文档提供的数据是每篇页面的生成时间不到1ms。&lt;/p&gt;

&lt;p&gt;认为对于个人博客来说，应该将时间花在内容上而不是各种折腾网站。Hugo会将Markdown格式的内容和设置好模版一起，生成漂亮干净的页面。挑选折腾好一个喜爱的模版，在Sublime Text里用Markdown写博客，再敲一行命令生成同步到服务器就OK了。整个体验是不是非常优雅简单还有点geek的味道呢？&lt;/p&gt;

&lt;h3 id=&#34;了解hugo&#34;&gt;了解Hugo&lt;/h3&gt;

&lt;p&gt;首先建立自己的网站，mysite是网站的路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后进入该路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在该目录下你可以看到以下几个目录和&lt;code&gt;config.toml&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ▸ archetypes/ 
 ▸ content/
 ▸ layouts/
 ▸ static/
   config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;是网站的配置文件，包括&lt;code&gt;baseurl&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;copyright&lt;/code&gt;等等网站参数。&lt;/p&gt;

&lt;p&gt;这几个文件夹的作用分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes：包括内容类型，在创建新内容时自动生成内容的配置&lt;/li&gt;
&lt;li&gt;content：包括网站内容，全部使用markdown格式&lt;/li&gt;
&lt;li&gt;layouts：包括了网站的模版，决定内容如何呈现&lt;/li&gt;
&lt;li&gt;static：包括了css, js, fonts, media等，决定网站的外观&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo提供了一些完整的主题可以使用，下载这些主题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时现成的主题存放在&lt;code&gt;themes/&lt;/code&gt;文件夹中。&lt;/p&gt;

&lt;p&gt;现在我们先熟悉一下Hugo，创建新页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入&lt;code&gt;content/&lt;/code&gt;文件夹可以看到，此时多了一个markdown格式的文件&lt;code&gt;about.md&lt;/code&gt;，打开文件可以看到时间和文件名等信息已经自动加到文件开头，包括创建时间，页面名，是否为草稿等。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
+++
date = &amp;quot;2015-02-01T18:19:54+08:00&amp;quot;
draft = true
title = &amp;quot;about&amp;quot;
Tag = [&amp;quot;blog&amp;quot;,&amp;quot;post&amp;quot;]

+++

# About me
- Jimmy Song
- rootsongjc@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我在页面中加入了一些内容，然后运行Hugo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t hyde --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;参数的意思是使用hyde主题渲染我们的页面，注意到&lt;code&gt;about.md&lt;/code&gt;目前是作为草稿，即&lt;code&gt;draft&lt;/code&gt;参数设置为&lt;code&gt;true&lt;/code&gt;，运行Hugo时要加上&lt;code&gt;--buildDrafts&lt;/code&gt;参数才会生成被标记为草稿的页面。 在浏览器输入localhost:1313，就可以看到我们刚刚创建的页面。&lt;/p&gt;

&lt;p&gt;注意观察当前目录下多了一个文件夹&lt;code&gt;public/&lt;/code&gt;，这里面是Hugo生成的整个静态网站，如果使用Github pages来作为博客的Host，你只需要将&lt;code&gt;public/&lt;/code&gt;里的文件上传就可以，这相当于是Hugo的输出。&lt;/p&gt;

&lt;p&gt;详细说明请看这位朋友的文章：&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;http://nanshu.wang/post/2015-01-31/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;hugo new&lt;/code&gt;命令生成的文章前面的加号中包括的那几行，是用来设置文章属性的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt; 自动增加时间标签，页面上默认显示n篇最新的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;draft&lt;/strong&gt; 设置为false的时候会被编译为HTML，true则不会编译和发表，在本地修改文章时候用true。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; 设置文章标题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tags&lt;/strong&gt; 数组，可以设置多个标签，都好隔开，hugo会自动在你博客主页下生成标签的子URL，通过这个URL可以看到所有具有该标签的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt; 文章分类，跟Tag功能差不多。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天先说到这里，再次声明下，&lt;a href=&#34;http://rootsongjc.github.io&#34;&gt;Jimmy&amp;rsquo;s blog&lt;/a&gt;就是用👆得步骤建立的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jimmy&amp;rsquo;s blog的页面比较简陋，你可以在&lt;a href=&#34;themes.gohugo.io&#34;&gt;这里&lt;/a&gt;找到更多可爱的模版。另外我打算给我翻译的书&lt;a href=&#34;http://rootsongjc.github.io/talks/cloud-native-go/&#34;&gt;Cloude Native Go&lt;/a&gt;做一个静态页面，用来发表图书信息、勘误、讨论等，现在已经有了&lt;a href=&#34;http://rootsongjc.github.io/cloud-native-go/&#34;&gt;雏形&lt;/a&gt;，欢迎大家关注。🙏&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>微服务设计读书笔记</title>
      <link>http://rootsongjc.github.io/talks/microservice-reading-notes/</link>
      <pubDate>Sat, 11 Mar 2017 15:45:27 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/microservice-reading-notes/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20160625036.jpg&#34; alt=&#34;青海湖畔&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(题图：青海湖畔  Jun 25,2016)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近在看&lt;strong&gt;《微服务设计（Sam Newman著）》&lt;/strong&gt;这本书，&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/docs/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B8%AD%E6%96%87%E5%AE%8C%E6%95%B4%E7%89%88-Sam%20Newman-%E4%BA%BA%E6%B0%91%E9%82%AE%E7%94%B5%E5%87%BA%E7%89%88%E7%A4%BE.pdf&#34;&gt;下载本书PDF&lt;/a&gt;(扫描版，高清49.17M)。作者是&lt;strong&gt;ThoughtWorks&lt;/strong&gt;的Sam Newman。这本书中包括很多业界是用案例，比如&lt;strong&gt;Netflix&lt;/strong&gt;和&lt;strong&gt;亚马逊&lt;/strong&gt;。有兴趣的话大家一起看看讨论一下。😄&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B9%A6%E7%9A%AE%E7%85%A7.jpg&#34; alt=&#34;微服务设计书皮照片&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本书读者交流微信群二维码，扫码入群（3月18日前有效）&lt;/strong&gt;，如果二维码失效，请移步&lt;a href=&#34;http://rootsongjc.github.io/about/&#34;&gt;这里&lt;/a&gt;加我微信，拉你入群。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg&#34; alt=&#34;二维码&#34; /&gt;&lt;/p&gt;

&lt;p&gt;P.S 这本书比较偏理论，另外还有一本中国人写的书，&lt;strong&gt;《微服务架构与实践，王磊著，电子工业出版社》&lt;/strong&gt;，&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/docs/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E7%8E%8B%E7%A3%8A%E8%91%97-%E7%94%B5%E5%AD%90%E5%B7%A5%E4%B8%9A%E5%87%BA%E7%89%88%E7%A4%BE.pdf&#34;&gt;下载本书的pdf&lt;/a&gt;，文字版，大小28.08M。这个人同样也是&lt;strong&gt;ThoughtWorks&lt;/strong&gt;的，两个人的观点不谋而合，依然是便理论的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Go - 基于Go和React的web云服务构建指南&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这本书是我最近在翻译的，将由&lt;strong&gt;电子工业出版社&lt;/strong&gt;出版，本书根据实际案例教你如何构建一个web微服务，是实践为服务架构的很好的参考。&lt;a href=&#34;http://rootsongjc.github.io/talks/cloud-native-go/&#34;&gt;查看本书介绍&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;1-微服务初探&#34;&gt;1.微服务初探&lt;/h2&gt;

&lt;h3 id=&#34;什么是微服务&#34;&gt;什么是微服务？&lt;/h3&gt;

&lt;p&gt;微服务（Microservices）这个词比较新颖，但是其实这种架构设计理念早就有了。&lt;em&gt;微服务是一种分布式架构设计理念，为了推动细粒度服务的使用，这些服务要能协同工作，每个服务都有自己的生命周期。一个为服务就是一个独立的实体，可以独立的部署在PAAS平台上，也可以作为一个独立的进程在主机中运行。服务之间通过API访问，修改一个服务不会影响其它服务。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;微服务的好处&#34;&gt;微服务的好处&lt;/h3&gt;

&lt;p&gt;微服务的好处有很多，包括:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;帮助你更快的采用新技术&lt;/li&gt;
&lt;li&gt;解决技术异构的问题，因为是用API网络通信，可以使用不同的语言和技术开发不同的服务&lt;/li&gt;
&lt;li&gt;增强系统弹性，服务的边界比较清晰，便于故障处理&lt;/li&gt;
&lt;li&gt;方便扩展，比如使用容器技术，可以很方便的一次性启动很多个微服务&lt;/li&gt;
&lt;li&gt;方便部署，因为微服务之间彼此独立，所以能够独立的部署单个服务而不影响其它服务，如果部署失败的话还可以回滚&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别忘了康为定律，微服务可以很好契合解决组织架构问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可重用，可随意组合&lt;/li&gt;
&lt;li&gt;便于维护，可以随时重写服务，不必担心历史遗留问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;与面向服务架构soa的关系&#34;&gt;与面向服务架构SOA的关系&lt;/h3&gt;

&lt;p&gt;可以说微服务架构师SOA的一种，但是目前的大多数SOA做的都不好，在&lt;code&gt;通信协议的选择&lt;/code&gt;、&lt;code&gt;第三方中间件的选择&lt;/code&gt;、&lt;code&gt;服务力度如何划分&lt;/code&gt;方面做的都不够好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;微服务与SOA的共同点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;都使用共享库，比如可重用的代码库&lt;/li&gt;
&lt;li&gt;模块化，比如Java中的OSGI(Open Source Gateway Initiative)、Erlang中的模块化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-架构师的职责&#34;&gt;2.架构师的职责&lt;/h2&gt;

&lt;h3 id=&#34;架构师应该关心是什么&#34;&gt;架构师应该关心是什么&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;架构师（Architect）&lt;/strong&gt;在英文中和&lt;strong&gt;建筑师&lt;/strong&gt;是同一个词，他们之间也有很多相同之处，架构师构建的是软件，而建筑师构建的是建筑。&lt;/p&gt;

&lt;p&gt;终于看到了我翻译的*Cloud Native Go*第14章中引用的这本书的原话了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%BC%95%E7%94%A8%E7%BF%BB%E8%AF%91.jpg&#34; alt=&#34;原话&#34; /&gt;&lt;/p&gt;

&lt;p&gt;软件的需求变更是&lt;strong&gt;来的那么快来的那么直接&lt;/strong&gt;，不像建筑那样可以在设计好后按照设计图纸一步步的去建设。&lt;/p&gt;

&lt;p&gt;架构师应该关心的是什么呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保证系统适合开发人员在上面工作&lt;/li&gt;
&lt;li&gt;关注服务之间的交互，不需要过于关注各个服务内部发生的事情，比如服务之间互相调用的接口，是使用&lt;code&gt;protocol buffer&lt;/code&gt;呢，还是使用&lt;code&gt;RESTful API&lt;/code&gt;，还是使用&lt;code&gt;Java RMI&lt;/code&gt;，这个才是架构师需要关注的问题，至于服务内部究竟使用什么，那就看开发人员自己了，&lt;strong&gt;架构师更需要关注系统的边界和分区&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;架构师应该与团队在一起，&lt;strong&gt;结对编程&lt;/strong&gt; 🤓🤓 了解普通工作，知道普通的工作是什么样子，做一个&lt;em&gt;代码架构师&lt;/em&gt; 😂&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;架构师应该做什么&#34;&gt;架构师应该做什么&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;提供原则指导实践，比如Heroku的&lt;a href=&#34;http://rootsongjc.github.io/blogs/12-factor-app/&#34;&gt;12因素法则&lt;/a&gt;用来指导SAAS应用架构一样，微服务架构设计也要有一套原则。&lt;/li&gt;
&lt;li&gt;提供要求标准，通过日志功能和监控对服务进行集中式管理，明确接口标准，提供安全性建议。&lt;/li&gt;
&lt;li&gt;代码治理。为开发人员提供范例和服务代码模板。&lt;/li&gt;
&lt;li&gt;解决技术债务。&lt;/li&gt;
&lt;li&gt;集中治理和领导。维持良好的团队关系，当团队跑偏的时候及时纠正。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-服务建模&#34;&gt;3.服务建模&lt;/h2&gt;

&lt;p&gt;以&lt;strong&gt;MusicCorp&lt;/strong&gt;这家公司的服务为例子讲解。&lt;/p&gt;

&lt;p&gt;服务建模的两个指导原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;高内聚：关键是找出问题的边界，把相关的问题放在同一个服务中。&lt;/li&gt;
&lt;li&gt;松耦合：修改一个服务不需要修改另一个。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;strong&gt;限定上下文&lt;/strong&gt;（一个由显示边界限定的特定指责）的方法将服务拆分，比如MusicCorp的服务可以拆分为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;财务部门&lt;/li&gt;
&lt;li&gt;仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们都不需要知道各自的具体实现，只要给它们提供特定的输入就会有你想要的产出。&lt;/p&gt;

&lt;p&gt;过早的将一个系统划分成微服务的代价非常高，尤其是在面对新领域时，将一个已有的代码库划分成微服务会比葱头开始建设微服务要简单的多。&lt;/p&gt;

&lt;h2 id=&#34;4-集成&#34;&gt;4.集成&lt;/h2&gt;

&lt;p&gt;使用共享数据库，为用户创建好接口，可以使用RPC（protocol buffer、thrift）或者REST。服务端和客户端消息格式可以用Json或XML。当然每种技术都有各自的适用场景，结合自己的业务选择。&lt;/p&gt;

&lt;p&gt;微服务的协作方式是什么样的呢？基于事件的异步通信，使用消息中间件来实现事件发布和消费者接收机制。比如用Kafka或RabbitMQ。&lt;/p&gt;

&lt;h2 id=&#34;5-分解单块系统&#34;&gt;5.分解单块系统&lt;/h2&gt;

&lt;p&gt;分解巨大无比没人感动的单块系统，首先要做的是理清代码库，找到&lt;strong&gt;接缝&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;分解系统带来的好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加快以后系统开发速度&lt;/li&gt;
&lt;li&gt;划清了团队结构（又是康威定律）&lt;/li&gt;
&lt;li&gt;增加安全审计功能后，保障安全性&lt;/li&gt;
&lt;li&gt;利于开展新技术&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-部署&#34;&gt;6. 部署&lt;/h2&gt;

&lt;p&gt;这一块跟传统服务的部署并没有太大的不同，无非是微服务的短平快，加快了CI（持续集成）的速度。如果将微服务打包为docker镜像，使用Jenkins、ansible、puppet等技术来部署微服务可以实现部署自动和效率的显著提高。&lt;/p&gt;

&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;

&lt;p&gt;该书的后面还讲了&lt;strong&gt;测试&lt;/strong&gt;、&lt;strong&gt;监控&lt;/strong&gt;、&lt;strong&gt;安全&lt;/strong&gt;、&lt;strong&gt;康威定律&lt;/strong&gt;、最后还上升到&lt;strong&gt;人本&lt;/strong&gt;，给予广大的软件开发人员强烈的人文关怀，可见提倡架构师要融入团队，最一个&lt;strong&gt;代码架构师&lt;/strong&gt;和&lt;strong&gt;结对编程&lt;/strong&gt;的作者是多么博爱❤️。&lt;/p&gt;

&lt;p&gt;该书的核心部分是&lt;strong&gt;第11章规模化微服务&lt;/strong&gt;，为将在下篇中来探讨一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloud Native Go - 基于Go和React的web云服务构建指南</title>
      <link>http://rootsongjc.github.io/talks/cloud-native-go/</link>
      <pubDate>Fri, 03 Mar 2017 17:29:54 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/cloud-native-go/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20160326003.jpg&#34; alt=&#34;北京植物园桃花&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(题图：北京植物园桃花 Mar 26,2016)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近在翻译Kevin Hoffman和Dan Nemeth的书《Cloud Native Go - 基于Go和React的web云服务构建指南》。目前已经完成图书的粗译，格式调整和排版，正在调整校对，预计本月将完成。本书将由&lt;strong&gt;电子工业出版社&lt;/strong&gt;出版。&lt;/p&gt;

&lt;p&gt;下面先罗列下目录，以飨读者。&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;Cloud Native Go. 1
构建基于Go和React的云原生Web应用&amp;hellip; 1
云服务构建完全指南&amp;hellip; 1
目录&amp;hellip; 4
前言&amp;hellip; 8
关于作者&amp;hellip; 9
致谢&amp;hellip; 9&lt;/p&gt;

&lt;h3 id=&#34;第1章-云之道-10&#34;&gt;第1章        云之道&amp;hellip; 10&lt;/h3&gt;

&lt;p&gt;云的优势&amp;hellip; 10
崇尚简洁&amp;hellip; 11
测试优先，测试一切&amp;hellip; 11
尽早发布, 频繁发布&amp;hellip; 12
自动化一切&amp;hellip; 13
建立服务生态系统&amp;hellip; 13
为什么使用GO?. 14
总结&amp;hellip; 15&lt;/p&gt;

&lt;h3 id=&#34;第2章-开始-16&#34;&gt;第2章        开始… 16&lt;/h3&gt;

&lt;p&gt;正确的工具&amp;hellip; 16
配置Git 16
建立Go. 18
配置您的Go工作区&amp;hellip; 18
检查环境&amp;hellip; 19
总结&amp;hellip; 19&lt;/p&gt;

&lt;h3 id=&#34;第3章-go入门-20&#34;&gt;第3章        Go入门&amp;hellip; 20&lt;/h3&gt;

&lt;p&gt;建立Hello Cloud. 20
使用基本函数&amp;hellip; 21
使用结构体&amp;hellip; 23
介绍Go接口&amp;hellip; 24
向结构体添加方法&amp;hellip; 24
Go中的接口动态类型检查&amp;hellip; 25
使用第三方包&amp;hellip; 27
创建自己的包&amp;hellip; 28
导出函数和数据&amp;hellip; 28
创建包&amp;hellip; 28
总结&amp;hellip; 30&lt;/p&gt;

&lt;h3 id=&#34;第4章-持续交付-31&#34;&gt;第4章        持续交付&amp;hellip; 31&lt;/h3&gt;

&lt;p&gt;Docker介绍&amp;hellip; 31
为什么要使用Docker？&amp;hellip; 31
安装Docker 32
运行Docker镜像&amp;hellip; 33
与Wercker的持续集成&amp;hellip; 33
持续集成最佳实践&amp;hellip; 34
为什么使用Wercker？&amp;hellip; 34
安装Wercker CLI 36
创建Wercker配置文件&amp;hellip; 36
使用Wercker进行构建&amp;hellip; 40
部署到DockerHub. 41
读者练习：创建完整的开发管道&amp;hellip; 42
高级挑战：集成第三方库&amp;hellip; 42
总结&amp;hellip; 43&lt;/p&gt;

&lt;h3 id=&#34;第5章-在go中构建微服务-44&#34;&gt;第5章        在Go中构建微服务&amp;hellip; 44&lt;/h3&gt;

&lt;p&gt;设计API First的服务&amp;hellip; 44
通过Apiary测试和发布文档&amp;hellip; 46
架设微服务&amp;hellip; 46
构建Test First的服务&amp;hellip; 48
创建第一个失败测试&amp;hellip; 49
测试Location Header 51
壮丽的蒙太奇 - 迭代测试&amp;hellip; 52
在云中部署和运行&amp;hellip; 53
总结&amp;hellip; 55&lt;/p&gt;

&lt;h3 id=&#34;第6章-运用后端服务-56&#34;&gt;第6章        运用后端服务&amp;hellip; 56&lt;/h3&gt;

&lt;p&gt;设计服务系统&amp;hellip; 56
测试优先构建依赖服务&amp;hellip; 57
构建Fulfillment服务&amp;hellip; 57
构建Catalog服务&amp;hellip; 60
在服务之间共享结构化数据&amp;hellip; 64
使用服务捆绑去外部化地址与元数据&amp;hellip; 65
服务发现&amp;hellip; 67
读者练习&amp;hellip; 69
总结&amp;hellip; 70&lt;/p&gt;

&lt;h3 id=&#34;第7章-构建数据服务-71&#34;&gt;第7章        构建数据服务&amp;hellip; 71&lt;/h3&gt;

&lt;p&gt;构建MongoDB存储库&amp;hellip; 71
集成测试一个Mongo-Backed服务&amp;hellip; 76
在云中运行&amp;hellip; 80
总结&amp;hellip; 81&lt;/p&gt;

&lt;h3 id=&#34;第8章-事件源和cqrs-83&#34;&gt;第8章        事件源和CQRS.. 83&lt;/h3&gt;

&lt;p&gt;现实源自事件&amp;hellip; 83
最终还是一致的&amp;hellip; 85
介绍命令查询责任分离&amp;hellip; 86
事件源案例&amp;hellip; 87
代码示例：管理无人机军队&amp;hellip; 88
构建命令处理程序服务&amp;hellip; 88
构建事件处理器&amp;hellip; 92
构建查询处理程序服务&amp;hellip; 95
总结&amp;hellip; 96&lt;/p&gt;

&lt;h3 id=&#34;第9章-使用go构建web应用程序-97&#34;&gt;第9章 使用Go构建web应用程序&amp;hellip; 97&lt;/h3&gt;

&lt;p&gt;处理静态文件和资产&amp;hellip; 97
支持javascript客户端&amp;hellip; 98
使用服务端模板&amp;hellip; 100
处理表单&amp;hellip; 102
使用Cookie和会话状态&amp;hellip; 102
使用Wercker构建和部署&amp;hellip; 104
总结&amp;hellip; 105&lt;/p&gt;

&lt;h3 id=&#34;第10章-云安全-106&#34;&gt;第10章 云安全&amp;hellip; 106&lt;/h3&gt;

&lt;p&gt;保护一个web应用程序&amp;hellip; 106
保护微服务&amp;hellip; 111
隐私和数据安全&amp;hellip; 113
阅读练习&amp;hellip; 114
总结&amp;hellip; 115&lt;/p&gt;

&lt;h3 id=&#34;第11章-使用websockets-116&#34;&gt;第11章 使用WebSockets. 116&lt;/h3&gt;

&lt;p&gt;解析WebSockets. 116
WebSockets和云的诞生&amp;hellip; 117
使用消息传递提供程序构建WebSocket应用程序&amp;hellip; 119
总结&amp;hellip; 122&lt;/p&gt;

&lt;h3 id=&#34;第12章-使用react构建web视图-123&#34;&gt;第12章 使用React构建web视图… 123&lt;/h3&gt;

&lt;p&gt;JavaScript State of the Union JavaScript  . 123
为什么选择React？&amp;hellip; 123
React应用程序的解剖&amp;hellip; 125
构建一个简单的React应用程序&amp;hellip; 127
测试React应用程序&amp;hellip; 132
进一步阅读&amp;hellip; 132
总结 . 133&lt;/p&gt;

&lt;h3 id=&#34;第13章-使用flux构建高可扩展性ui-134&#34;&gt;第13章      使用Flux构建高可扩展性UI 134&lt;/h3&gt;

&lt;p&gt;Flux介绍&amp;hellip; 134
创建Flux应用程序&amp;hellip; 136
总结&amp;hellip; 141&lt;/p&gt;

&lt;h3 id=&#34;第14章-创建完整应用world-of-fluxcraft-143&#34;&gt;第14章      创建完整应用World of FluxCraft 143&lt;/h3&gt;

&lt;p&gt;World of FluxCraft介绍&amp;hellip; 143
架构概览&amp;hellip; 145
Flux GUI 146
命令处理&amp;hellip; 148
事件处理&amp;hellip; 149
维持现实服务的状态&amp;hellip; 149
地图管理&amp;hellip; 150
自动验收测试&amp;hellip; 150
总结&amp;hellip; 151&lt;/p&gt;

&lt;h3 id=&#34;第15章-结论-152&#34;&gt;第15章     结论&amp;hellip; 152&lt;/h3&gt;

&lt;p&gt;我们学到了什么？&amp;hellip; 152
下一步&amp;hellip; 153&lt;/p&gt;

&lt;h3 id=&#34;a云应用的故障排查-154&#34;&gt;A云应用的故障排查… 154&lt;/h3&gt;

&lt;p&gt;使用日志流&amp;hellip; 154
健康和性能监控&amp;hellip; 154
在云中调试应用程序&amp;hellip; 155&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TalkingData Annual Meeting</title>
      <link>http://rootsongjc.github.io/talks/td-annual-meeting/</link>
      <pubDate>Sun, 26 Feb 2017 20:18:54 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/td-annual-meeting/</guid>
      <description>

&lt;h1 id=&#34;talkingdata-annual-meeting-2017&#34;&gt;TalkingData Annual Meeting 2017&lt;/h1&gt;

&lt;p&gt;Dayin Theater, Beijing Friday, Feb 24, 2017&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/2017022401.jpeg&#34; alt=&#34;pic1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/2017022402.jpeg&#34; alt=&#34;pics2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&#34;http://rootsongjc.github.io&#34;&gt;Jimmy Song&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>