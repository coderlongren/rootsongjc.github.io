<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talks on Jimmy&#39;s blog</title>
    <link>http://rootsongjc.github.io/talks/index.xml</link>
    <description>Recent content in Talks on Jimmy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Apr 2017 20:27:00 +0800</lastBuildDate>
    <atom:link href="http://rootsongjc.github.io/talks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>两款图片处理工具——Google Guetzli和基于AI的Deep Photo Style Transfer</title>
      <link>http://rootsongjc.github.io/talks/picture-process/</link>
      <pubDate>Sun, 02 Apr 2017 20:27:00 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/picture-process/</guid>
      <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;如果你看过美剧「硅谷」会记得剧中主角们所在的创业公司&lt;a href=&#34;www.piedpiper.com&#34;&gt;PiedPipper&lt;/a&gt;，他们就是靠自己发明的视频压缩算法来跟大公司Hooli竞争的，这部剧现在已经发展到第4季，在&lt;a href=&#34;http://v.qq.com/detail/d/dr2zn76oez8tyt4.html?ptag=baidu.aladdin.tv&#34;&gt;腾讯视频&lt;/a&gt;上可以免费观看。&lt;/p&gt;

&lt;p&gt;最近关注了两个&lt;strong&gt;图像处理&lt;/strong&gt;的Open Source Projects。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guetzli&#34;&gt;Google Guetzli&lt;/a&gt; 图像压缩工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer&#34;&gt;Luan Fujun&amp;rsquo;s Deep Photo Style Transfer&lt;/a&gt; 图像style转换工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外对于图像处理还处于Photoshop、Lightroom这种摄影后期和图像处理命令行工具&lt;a href=&#34;https://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt;的我来说，图像压缩，智能图像风格转换实乃上乘武功，不是我等凡夫俗子驾驭的了，但是乘兴而来，总不能败兴而归吧，下面我们来一探究竟。&lt;/p&gt;

&lt;h2 id=&#34;google-guetzli&#34;&gt;Google Guetzli&lt;/h2&gt;

&lt;p&gt;我在Mac上试用了一下，安装很简单，只要一条命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shlell&#34;&gt;brew install guetzli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是当我拿一张&lt;code&gt;22M&lt;/code&gt;大小的照片使用guetzli压缩的时候，我是绝望的，先后三次kill掉了进程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;因为实在是太慢了&lt;/strong&gt;，也能是我软件对内存和CPU的利用率不高，效果你们自己看看。&lt;/p&gt;

&lt;p&gt;原图是这个样子的，拍摄地点在景山上的，俯瞰紫禁城的绝佳位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/guetzli/IMG_5430.JPG&#34; alt=&#34;原图&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;guetzli --quality 84 --verbose 20160403052.jpg output.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么quality要设置成84呢？因为只能设置为84+的quality，如果要设置的更低的话需要自己修改代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/guetzli/IMG_5429.JPG&#34; alt=&#34;process&#34; /&gt;&lt;/p&gt;

&lt;p&gt;耗时了一个小时，后台进程信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/guetzli/IMG_5428.JPG&#34; alt=&#34;后台进程&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个是使用&lt;strong&gt;Squash&lt;/strong&gt;压缩后的大小效果，压缩每张照片差不多只要3秒钟。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Squash的logo就是个正在被剥皮的🍊，这是&lt;a href=&#34;http://xclient.info/s/squash.html&#34;&gt;下载地址&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;压缩比分别为&lt;code&gt;70%&lt;/code&gt;和&lt;code&gt;30%&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/guetzli/IMG_5434.JPG&#34; alt=&#34;Img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;压缩比70%后的细节放大图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/guetzli/IMG_5432.JPG&#34; alt=&#34;70&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;压缩比30%的细节放大图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/guetzli/IMG_5433.JPG&#34; alt=&#34;30&#34; /&gt;&lt;/p&gt;

&lt;p&gt;你看出什么区别了吗？反正我是没有。&lt;/p&gt;

&lt;p&gt;下面再来看看耗时一个小时，千呼万唤始出来的guetzli压缩后的效果和使用squash压缩比为30%的效果对比。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/img/guetzli/FullSizeRender.jpg&#34; alt=&#34;对比&#34; /&gt;&lt;/p&gt;

&lt;p&gt;左面是使用guetzli压缩后（4.1M），右面使用的squash压缩后（3.1M）的照片。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;似乎还是没有什么区别啊？你看出来了吗？&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;guetzli总结&#34;&gt;Guetzli总结&lt;/h3&gt;

&lt;p&gt;可能是我使用Guetzli的方式不对，但是命令行里确实没有设置CPU和内存资源的选项啊，为啥压缩照片会这么慢呢？效果也并不出彩，不改代码的话照片质量只能设置成84以上，但是这个是&lt;strong&gt;Open Source&lt;/strong&gt;的，使用的C++开发，可以研究下它的图像压缩算法。&lt;/p&gt;

&lt;h1 id=&#34;deep-photo-style-transfer&#34;&gt;Deep Photo Style Transfer&lt;/h1&gt;

&lt;p&gt;来自康奈尔大学的Luan Fujun开源的图像sytle转换工具，看了&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer&#34;&gt;README&lt;/a&gt;的介绍，上面有很多图像风格转换的例子，真的很惊艳，市面上好像还没有这种能够在给定任意一张照片的情况下，自动将另一张照片转换成该照片的style。&lt;/p&gt;

&lt;p&gt;这个工具使用Matlab和Lua开发，基于&lt;a href=&#34;https://github.com/torch/torch7&#34;&gt;Torch&lt;/a&gt;运行的时候需要&lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA&lt;/a&gt;，&lt;a href=&#34;https://developer.nvidia.com/cudnn&#34;&gt;cudnn&lt;/a&gt;，&lt;a href=&#34;https://www.mathworks.com/&#34;&gt;Matlab&lt;/a&gt;，环境实在太复杂，就没折腾，启动有人发布&lt;a href=&#34;https://github.com/luanfujun/deep-photo-styletransfer/issues/29&#34;&gt;Docker镜像&lt;/a&gt;，已经有人提了issue。&lt;/p&gt;

&lt;p&gt;如果它能够被商用，绝对是继&lt;strong&gt;Prisma&lt;/strong&gt;后又一人工智能照片处理应用利器。&lt;/p&gt;

&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;是不是有了照片风格转换这个东西就不需要做照片后期了？只要选几张自己喜欢的风格照片，再鼠标点几下就可以完成照片处理了？摄影师要失业了？非也！照片风格东西本来就是很主观性的，每个人都有自己喜欢的风格，照相机发明后就有人说画家要失业了，其实不然，画画依然是创造性地劳动，只能说很多写实风格的画家要失业了。Deep Photo Style Transfer也许会成为Lightroom或者手机上一款app的功能，是一个不错的工具。也许还会成为像Prisma一样的现象级产品，who knows?🤷‍♂️&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>容器的应用场景</title>
      <link>http://rootsongjc.github.io/talks/container-applications-scenarios/</link>
      <pubDate>Thu, 23 Mar 2017 15:26:11 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/container-applications-scenarios/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/2014080101.jpg&#34; alt=&#34;深圳大梅沙&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（题图：深圳大梅沙 Aug 1,2014）&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你对容器到底有什么用存在疑惑的话，推荐你看下我今天碰到的一篇阿里云的&lt;a href=&#34;https://help.aliyun.com/document_detail/25977.html?spm=5176.2020520152.201.2.Oc3baB&#34;&gt;容器服务-产品简介-应用场景&lt;/a&gt;的文章，觉得比较好，把容器的典型应用场景都概括了，容器对于互联网的弹性扩展和微服务架构有很好的应用场景，P.S这里不是在帮阿里云做广告，这里的推荐搭配确实是很多常用的配置选项。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;devops-持续交付&#34;&gt;DevOps 持续交付&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;最优化的持续交付流程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;配合 Jenkins 帮您自动完成从代码提交到应用部署的 DevOps 完整流程，确保只有通过自动测试的代码才能交付和部署，高效替代业内部署复杂、迭代缓慢的传统方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能够实现：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOps 自动化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实现从代码变更到代码构建，镜像构建和应用部署的全流程自动化。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;环境一致性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容器技术让您交付的不仅是代码，还有基于不可变架构的运行环境。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;持续反馈&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每次集成或交付，都会第一时间将结果实时反馈。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐搭配使用：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;云服务器 ECS + 容器服务&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/25977/cn_zh/1488845113820/%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1---%E6%9E%B6%E6%9E%84%E5%9B%BE---DevOps.png&#34; alt=&#34;1&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;基于高性能计算的机器学习&#34;&gt;基于高性能计算的机器学习&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;专注机器学习本身，快速实现从 0 到 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;帮助数据工程师在 HPC 集群上轻松部署机器学习应用，跟踪试验和训练、发布模型，数据部署在分布式存储，无需关心繁琐部署运维，专注核心业务，快速从 0 到 1。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能够实现：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;快速弹性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一键部署机器学习应用，秒级启动和弹性伸缩。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;简单可控&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一行配置轻松获取 GPU 计算能力，并且可以监控 GPU 的资源。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;深度整合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无缝接入阿里云存储、日志监控和安全基础架构能力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐搭配使用：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;高性能计算 (Alibaba Cloud HPC) + 容器服务 + 阿里云文件存储 NAS + 对象存储 OSS&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/25977/cn_zh/1488845332018/%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%20-%20%E6%9E%B6%E6%9E%84%E5%9B%BE%20-%20%E9%AB%98%E6%80%A7%E8%83%BD%E8%AE%A1%E7%AE%97HPC.png&#34; alt=&#34;2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;微服务架构&#34;&gt;微服务架构&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;实现敏捷开发和部署落地，加速企业业务迭代&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;企业生产环境中，通过合理微服务拆分，将每个微服务应用存储在阿里云镜像仓库帮您管理。您只需迭代每个微服务应用，由阿里云提供调度、编排、部署和灰度发布能力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能够实现：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;负载均衡和服务发现&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持 4 层和 7 层的请求转发和后端绑定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;丰富的调度和异常恢复策略&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持服务级别的亲和性调度，支持跨可用区的高可用和灾难恢复。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;微服务监控和弹性伸缩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持微服务和容器级别的监控，支持微服务的自动伸缩。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐搭配使用：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;云服务器 ECS + 云数据库 RDS 版 + 对象存储 OSS + 容器服务&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/25977/cn_zh/1488846287403/%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1---%E6%9E%B6%E6%9E%84%E5%9B%BE---%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.png&#34; alt=&#34;3&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;混合云架构&#34;&gt;混合云架构&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;统一运维多个云端资源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在容器服务控制台上同时管理云上云下的资源，不需在多中云管理控制台中反复切换。基于容器基础设施无关的特性，使用同一套镜像和编排同时在云上云下部署应用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能够实现：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在云上伸缩应用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;业务高峰期，在云端快速扩容，把一些业务流量引到云端。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;云上容灾&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;业务系统同时部署到云上和云下，云下提供服务，云上容灾。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;云下开发测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;云下开发测试后的应用无缝发布到云上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐搭配使用：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;云服务器 ECS + 专有网络 VPC + 高速通道（ExpressConnect）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/25977/cn_zh/1488846639288/%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1%20-%20%E6%9E%B6%E6%9E%84%E5%9B%BE%20-%20%E6%B7%B7%E5%90%88%E4%BA%91.png&#34; alt=&#34;4&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;弹性伸缩架构&#34;&gt;弹性伸缩架构&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;根据业务流量自动对业务扩容/缩容&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;容器服务可以根据业务流量自动对业务扩容/缩容，不需要人工干预，避免流量激增扩容不及时导致系统挂掉，以及平时大量闲置资源造成浪费。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;能够实现：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;快速响应&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;业务流量达到扩容指标，秒级触发容器扩容操作。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全自动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;整个扩容/缩容过程完全自动化，无需人工干预。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;低成本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;流量降低自动缩容，避免资源浪费。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推荐搭配使用：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;云服务器 ECS + 云监控&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/25977/cn_zh/1488846792028/%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1---%E6%9E%B6%E6%9E%84%E5%9B%BE---%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9.png&#34; alt=&#34;5&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React入门</title>
      <link>http://rootsongjc.github.io/talks/react-tryout/</link>
      <pubDate>Sat, 18 Mar 2017 10:07:13 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/react-tryout/</guid>
      <description>

&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;

&lt;p&gt;前端无疑是2016年最火热的技术，没有之一，2017年依然🔥。现在不会点前端技术都不好意思出去见人。&lt;/p&gt;

&lt;p&gt;各种前端mvc框架层出不穷，angular js，vue，&lt;a href=&#34;http://lib.csdn.net/base/react&#34;&gt;React&lt;/a&gt;，前端组件化开发概念已经深入人心。作为开发者，学习下前端设计也是有必要的，一来页面有些小的设计问题可以自己解决，同时还能提高自己的审美，提高网站的ui设计水平。&lt;/p&gt;

&lt;p&gt;今天看到一本书《React Up and Running》的中文版本《React快速上手开发》出版了，英文版可以在&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/React_Up_and_Running.pdf&#34;&gt;这里&lt;/a&gt;下载。最近我在翻译的书&lt;a href=&#34;rootsongjc.github.io/talks/cloud-native-go/&#34;&gt;Cloud Native Go&lt;/a&gt;中的实例也使用了React来构建Web应用程序，因此在网上找了一些React资料学习下。&lt;/p&gt;

&lt;h2 id=&#34;必备基础技能&#34;&gt;必备基础技能&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/JacksonTian/fks&#34;&gt;前端技能汇总&lt;/a&gt;这个项目详细记录
了前端工程师牵涉到的各方面知识。在具备基本技能之后可以在里面找到学习
的方向，完善技能和知识面。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dypsilon/frontend-dev-bookmarks&#34;&gt;frontend-dev-bookmarks&lt;/a&gt;是老外总结的&lt;a href=&#34;http://lib.csdn.net/base/javascript&#34;&gt;前端开发&lt;/a&gt;资源。覆盖面非常广。包括各种知识点、工具、技术，非常全面。&lt;/p&gt;

&lt;p&gt;以下是个人觉得入门阶段应该熟练掌握的基础技能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/html401/cover.html#minitoc&#34;&gt;HTML4&lt;/a&gt;，&lt;a href=&#34;http://www.w3.org/TR/html5/#contents&#34;&gt;HTML5&lt;/a&gt;语法、标签、语义&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/CSS2/#minitoc&#34;&gt;CSS2.1&lt;/a&gt;，&lt;a href=&#34;http://www.w3.org/TR/2001/WD-css3-roadmap-20010523/#table&#34;&gt;CSS3&lt;/a&gt;规范，与HTML结合实现各种布局、效果&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&#34;&gt;Ecma-262&lt;/a&gt;定义的javascript的语言核心，原生&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API&#34;&gt;客户端javascript&lt;/a&gt;，&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model&#34;&gt;DOM操作&lt;/a&gt;，&lt;a href=&#34;https://developer.mozilla.org/en/docs/web/Guide/HTML/HTML5&#34;&gt;HTML5新增功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个成熟的客户端javascript库，推荐&lt;a href=&#34;http://jquery.com/&#34;&gt;jquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一门服务器端语言：如果有服务器端开发经验，使用已经会的语言即可，如果没有服务器端开发经验，熟悉Java可以选择Servlet，不熟悉的可以选PHP，能实现简单登陆注册功能就足够支持前端开发了，后续可能需要继续学习，最基本要求是实现简单的功能模拟，&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616.html&#34;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在掌握以上基础技能之后，工作中遇到需要的技术也能快速学习。&lt;/p&gt;

&lt;h2 id=&#34;基本开发工具&#34;&gt;基本开发工具&lt;/h2&gt;

&lt;p&gt;恰当的工具能有效提高学习效率，将重点放在知识本身，在出现问题时能快速定位并
解决问题，以下是个人觉得必备的前端开发工具：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文本编辑器：推荐&lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;，支持各种插件、主题、设置，使用方便&lt;/li&gt;
&lt;li&gt;浏览器：推荐&lt;a href=&#34;http://www.google.cn/chrome/?hl=zh-CN&amp;amp;standalone=1&#34;&gt;Google Chrome&lt;/a&gt;，更新快，对前端各种标准提供了非常好的支持&lt;/li&gt;
&lt;li&gt;调试工具：推荐Chrome自带的&lt;a href=&#34;https://developer.chrome.com/devtools&#34;&gt;Chrome develop tools&lt;/a&gt;，可以轻松查看DOM结构、样式，通过控制台输出调试信息，调试javascript，查看网络等&lt;/li&gt;
&lt;li&gt;辅助工具：PhotoShop编辑图片、取色，fireworks量尺寸，AlloyDesigner对比尺寸，以及前面的到的Chrome develop tools，&lt;/li&gt;
&lt;li&gt;翻墙工具：Shadowsocks、云梯VPN&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;学习方法和学习目标&#34;&gt;学习方法和学习目标&lt;/h2&gt;

&lt;p&gt;方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;入门阶段反复阅读经典书籍的中文版，书籍中的每一个例子都动手实现并在浏览器中查看效果&lt;/li&gt;
&lt;li&gt;在具备一定基础之后可以上网搜各种教程、demo，了解各种功能的实际用法和常见功能的实现方法&lt;/li&gt;
&lt;li&gt;阅读HTML，CSS，Javascript标准全面完善知识点&lt;/li&gt;
&lt;li&gt;阅读前端牛人的博客、文章提升对知识的理解&lt;/li&gt;
&lt;li&gt;善用搜索引擎&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;目标：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;熟记前面知识点部分的重要概念，结合学习经历得到自己的理解&lt;/li&gt;
&lt;li&gt;熟悉常见功能的实现方法，如常见CSS布局，Tab控件等。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;入门之路&#34;&gt;入门之路&lt;/h2&gt;

&lt;p&gt;以下是入门阶段不错的书籍和资料&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML先看&lt;a href=&#34;http://www.amazon.cn/gp/product/B00BMK4GKW/ref=s9_simh_gw_p14_d0_i2?pf_rd_m=A1AJ19PSB66TGU&amp;amp;pf_rd_s=center-2&amp;amp;pf_rd_r=1AH2NF64STS19GY8GR54&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=108773272&amp;amp;pf_rd_i=899254051&#34;&gt;《HTML &amp;amp; CSS: Design and Build Websites》&lt;/a&gt;1-9章，然后&lt;a href=&#34;http://www.amazon.cn/HTML5%E7%A7%98%E7%B1%8D-Matthew-MacDonald/dp/B009DFCZAQ/ref=sr_1_1?ie=UTF8&amp;amp;qid=1414740812&amp;amp;sr=8-1&amp;amp;keywords=html5+the+missing+manual&#34;&gt;《HTML5: The Missing Manual》&lt;/a&gt;1-4章。&lt;/li&gt;
&lt;li&gt;CSS先看&lt;a href=&#34;http://www.amazon.cn/CSS-The-Missing-Manual-Mcfarland-David-Sawyer/dp/0596802447/ref=sr_1_1?ie=UTF8&amp;amp;qid=1414742710&amp;amp;sr=8-1&amp;amp;keywords=css+the+missing+manual+2&#34;&gt;《CSS: The Missing Manual》&lt;/a&gt;，然后&lt;a href=&#34;http://www.amazon.cn/CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E8%BF%88%E8%80%B6/dp/B0011F5SIC/ref=sr_1_1?ie=UTF8&amp;amp;qid=1414744248&amp;amp;sr=8-1&amp;amp;keywords=css+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97&#34;&gt;《CSS权威指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;javascript先看&lt;a href=&#34;http://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414744358&amp;amp;sr=1-1&amp;amp;keywords=javascript+%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1&#34;&gt;《javascript高级程序设计》&lt;/a&gt;，然后&lt;a href=&#34;http://www.amazon.cn/O-Reilly%E7%B2%BE%E5%93%81%E5%9B%BE%E4%B9%A6%E7%B3%BB%E5%88%97-JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%BC%97%E5%85%B0%E7%BA%B3%E6%A0%B9/dp/B007VISQ1Y/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414744401&amp;amp;sr=1-1&amp;amp;keywords=javascript+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97&#34;&gt;《javascript权威指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTTP看&lt;a href=&#34;http://www.amazon.cn/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E5%90%89%E5%B0%94%E5%88%A9/dp/B008XFDQ14/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1414744440&amp;amp;sr=1-1&amp;amp;keywords=HTTP+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97&#34;&gt;HTTP权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在整个学习过程中HTML CSS JavaScript会有很多地方需要互相结合，实际工作中也是这样，一个简单的功能模块都需要三者结合才能实现。&lt;/li&gt;
&lt;li&gt;动手是学习的重要组成部分，书籍重点讲解知识点，例子可能不是很充足，这就需要利用搜索引擎寻找一些简单教程，照着教程实现功能。以下是一些比较好的教程网址

&lt;ul&gt;
&lt;li&gt;可以搜索各大公司前端校招笔试面试题作为练习题或者他人总结的&lt;a href=&#34;https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese&#34;&gt;前端面试题&lt;/a&gt;还有&lt;a href=&#34;https://github.com/qiu-deqing/FE-interview&#34;&gt;个人总结的面试题&lt;/a&gt;（带参考答案）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.tutsplus.com/&#34;&gt;http://code.tutsplus.com&lt;/a&gt;有各种各样的教程&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web&#34;&gt;MDN&lt;/a&gt;也有很多教程，更重要的是里面有详细的文档，需要查找某个功能时在Google搜索：&lt;code&gt;xxx site:https://developer.mozilla.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/zh/&#34;&gt;http://www.html5rocks.com/zh/&lt;/a&gt;也有很多优质教程&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sitepoint.com/&#34;&gt;http://www.sitepoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://alistapart.com/&#34;&gt;http://alistapart.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;原生javascript是需要重点掌握的技能，在掌握原生javascript的基础上推荐熟练掌握jQuery，在实际工作中用处很大，这方面的书籍有&lt;a href=&#34;http://www.amazon.com/Learning-jQuery-Fourth-Jonathan-Chaffer/dp/178216314X/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1410099243&amp;amp;sr=1-1&amp;amp;keywords=learning+jquery&#34;&gt;《Learning jQuery》&lt;/a&gt;或者去&lt;a href=&#34;http://learn.jquery.com/&#34;&gt;jQuery官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;建一个&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;账号，保存平时学习中的各种代码和项目。&lt;/li&gt;
&lt;li&gt;有了一定基础之后可以搭建一个个人博客，记录学习过程中遇到的问题和解决方法，方便自己查阅也为其他人提供了帮助。也可以去&lt;a href=&#34;http://www.cnblogs.com/&#34;&gt;http://www.cnblogs.com/&lt;/a&gt;或者&lt;a href=&#34;http://www.csdn.net/&#34;&gt;http://www.csdn.net/&lt;/a&gt;这样的网站注册账号，方便实用&lt;/li&gt;
&lt;li&gt;经常实用Google搜索英文资料应该经常找到来自&lt;a href=&#34;http://stackoverflow.com/&#34;&gt;http://stackoverflow.com/&lt;/a&gt;的高质量答案，与到问题可以直接在这里搜索，如果有精力，注册一个账号为别人解答问题也能极大提高个人能力。&lt;/li&gt;
&lt;li&gt;经典书籍熟读之后，可以打开前面必备基础技能部分的链接。认真读对应标准，全面掌握知识&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;继续提高&#34;&gt;继续提高&lt;/h2&gt;

&lt;p&gt;有了前面的基础之后，前端基本算是入门了，这时候可能每个人心中都有了一些学习方向，如果还是没有。
可以参考前面必备技能部分提到的那两个项目，从里面选一些进行发展学习。以下是一些不错的方面：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gruntjs.com/&#34;&gt;Grunt&lt;/a&gt;：前端自动化工具，提高工作效率&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lesscss.org/&#34;&gt;less css&lt;/a&gt;：优秀的CSS预处理器&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;bootstrap&lt;/a&gt;：优秀的CSS框架，对没有设计师的团队很不错，与less结合使用效果完美&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://requirejs.org/&#34;&gt;requirejs&lt;/a&gt;：AMD规范的模块加载器，前端模块化趋势的必备工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;：JavaScript也可以做后台，前端工程师地位更上一步&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;：做Single Page Application的好工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Guide/Mobile&#34;&gt;移动端web开发&lt;/a&gt;：智能手机的普及让移动端的流量正在逐步赶超PC端&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/devtools/docs/javascript-memory-profiling?hl=figoogle&#34;&gt;Javascript内存管理&lt;/a&gt;：SPA长期运行需要注意内存泄露的问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=undefined&amp;amp;sr=1-1&amp;amp;keywords=high+performance+javascript&#34;&gt;High Performance JavaScript(Build Faster Web Application Interfaces)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.yahoo.com/performance/rules.html&#34;&gt;Best Practices for Speeding Up Your Web Site&lt;/a&gt;：重要技能&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;react开发环境配置&#34;&gt;React开发环境配置&lt;/h2&gt;

&lt;p&gt;我在Mac下安装node支持。参考这篇文档：&lt;a href=&#34;http://www.jianshu.com/p/20ea93641bda&#34;&gt;http://www.jianshu.com/p/20ea93641bda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接执行一条命名就可以安装好环境：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$brew install node &amp;amp;&amp;amp; \
npm install -g grunt-cli &amp;amp;&amp;amp; \
npm install -g webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装好了之后就可以Get started了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/418e48e0cef1&#34;&gt;React+Webpack快速上手指南&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tianxiangbing.github.io/react-cn/docs/getting-started.html&#34;&gt;React native中文资料&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/03/react.html&#34;&gt;阮一峰的react实例教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;未完待续。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>零基础使用Hugo和GitHub Pages创建自己的博客</title>
      <link>http://rootsongjc.github.io/talks/building-github-pages-with-hugo/</link>
      <pubDate>Fri, 17 Mar 2017 22:08:25 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/building-github-pages-with-hugo/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20151005061.jpg&#34; alt=&#34;鹰&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（题图：🦅 北京动物园 Oct 5,2015）&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;亲，你还在为虚拟主机、域名、空间而发愁吗？你想拥有自己的网站吗？你想拥有一个分享知识、留住感动，为开源事业而奋斗终身吗？那么赶快拿起你手中的📱拨打&lt;del&gt;16899168&lt;/del&gt;，不对，是看这篇文章吧，不用998，也不用168，这一切都是免费的，是的&lt;strong&gt;你没看错，真的不要钱！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;

&lt;p&gt;当然还是需要你有一点电脑基础的，会不会编程不要紧，还要会一点英文，你需要先申请一下几个账号和安装一些软件环境：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.github.com&#34;&gt;GitHub&lt;/a&gt; &lt;strong&gt;这是必需的&lt;/strong&gt;，因为你需要使用&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;来托管你的网站。而且你还需要安装git工具。创建一个以自己用户名命名的username.github.io的project。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.qiniu.com/&#34;&gt;七牛云存储&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，为了存储文件方便，建议申请一个，免费10G的存储空间，存储照片和一些小文件是足够的，可以用来做外链，方便存储和管理，这样你就不用把图片也托管到Github上了。流量也是不限的。我没有收七牛的一点好处，以为是我自己用的，所以推荐给大家，七牛还有命令行客户端，方便你上传和同步文件。如上的题图都是存储在七牛云中的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;tongji.baidu.com&#34;&gt;百度统计&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，基本的网站数据分析，免费的，质量还行。还有微信公众号可以查看，这一点我发现腾讯分析居然都没有微信公众号，自家的产品咋都不推出微信客户端呢。顺便提一下，这个统计账号跟你的百度账号不是同一个东西，两者是两套体系，当然你可以和自己的百度账号关联。只需要在Web的Header中植入一段JS代码即可。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; &lt;strong&gt;必需的&lt;/strong&gt;，静态网站生成工具，用来编译静态网站的。跟Hexo比起来我更喜欢这个工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://typora.io/&#34;&gt;Typro&lt;/a&gt; &lt;strong&gt;非必需&lt;/strong&gt;，但是强烈推荐，我最喜欢的免费的Markdown编辑器，hugo可以编译markdown格式为HTML，所以用它来写博客是最合适不过了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好了注册好Github后你现在可以尽情的玩耍了！😄&lt;/p&gt;

&lt;h2 id=&#34;let-s-rock-roll&#34;&gt;Let&amp;rsquo;s rock&amp;amp;roll!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;首先介绍下Hugo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugo是一种通用的网站框架。严格来说，Hugo应该被称作静态网站生成器。&lt;/p&gt;

&lt;p&gt;静态网站生成器从字面上来理解，就是将你的内容生成静态网站。所谓“静态”的含义其实反映在网站页面的生成的时间。一般的web服务器（WordPress, Ghost, Drupal等等）在收到页面请求时，需要调用数据库生成页面（也就是HTML代码），再返回给用户请求。而静态网站则不需要在收到请求后生成页面，而是在整个网站建立起之前就将所有的页面全部生成完成，页面一经生成便称为静态文件，访问时直接返回现成的静态页面，不需要数据库的参与。&lt;/p&gt;

&lt;p&gt;采用静态网站的维护也相当简单，实际上你根本不需要什么维护，完全不用考虑复杂的运行时间，依赖和数据库的问题。再有也不用担心安全性的问题，没有数据库，网站注入什么的也无从下手。&lt;/p&gt;

&lt;p&gt;静态网站最大好处就是访问快速，不用每次重新生成页面。当然，一旦网站有任何更改，静态网站生成器需要重新生成所有的与更改相关的页面。然而对于小型的个人网站，项目主页等等，网站规模很小，重新生成整个网站也是非常快的。Hugo在速度方面做得非常好，Dan Hersam在他这个&lt;a href=&#34;https://www.udemy.com/build-static-sites-in-seconds-with-hugo/&#34;&gt;Hugo教程&lt;/a&gt;里提到，5000篇文章的博客，Hugo生成整个网站只花了6秒，而很多其他的静态网站生成器则需要几分钟的时间。我的博客目前文章只有几十篇，用Hugo生成整个网站只需要0.1秒。官方文档提供的数据是每篇页面的生成时间不到1ms。&lt;/p&gt;

&lt;p&gt;认为对于个人博客来说，应该将时间花在内容上而不是各种折腾网站。Hugo会将Markdown格式的内容和设置好模版一起，生成漂亮干净的页面。挑选折腾好一个喜爱的模版，在Sublime Text里用Markdown写博客，再敲一行命令生成同步到服务器就OK了。整个体验是不是非常优雅简单还有点geek的味道呢？&lt;/p&gt;

&lt;h3 id=&#34;了解hugo&#34;&gt;了解Hugo&lt;/h3&gt;

&lt;p&gt;首先建立自己的网站，mysite是网站的路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后进入该路径&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在该目录下你可以看到以下几个目录和&lt;code&gt;config.toml&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ▸ archetypes/ 
 ▸ content/
 ▸ layouts/
 ▸ static/
   config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt;是网站的配置文件，包括&lt;code&gt;baseurl&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;copyright&lt;/code&gt;等等网站参数。&lt;/p&gt;

&lt;p&gt;这几个文件夹的作用分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes：包括内容类型，在创建新内容时自动生成内容的配置&lt;/li&gt;
&lt;li&gt;content：包括网站内容，全部使用markdown格式&lt;/li&gt;
&lt;li&gt;layouts：包括了网站的模版，决定内容如何呈现&lt;/li&gt;
&lt;li&gt;static：包括了css, js, fonts, media等，决定网站的外观&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hugo提供了一些完整的主题可以使用，下载这些主题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone --recursive https://github.com/spf13/hugoThemes themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时现成的主题存放在&lt;code&gt;themes/&lt;/code&gt;文件夹中。&lt;/p&gt;

&lt;p&gt;现在我们先熟悉一下Hugo，创建新页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入&lt;code&gt;content/&lt;/code&gt;文件夹可以看到，此时多了一个markdown格式的文件&lt;code&gt;about.md&lt;/code&gt;，打开文件可以看到时间和文件名等信息已经自动加到文件开头，包括创建时间，页面名，是否为草稿等。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
+++
date = &amp;quot;2015-02-01T18:19:54+08:00&amp;quot;
draft = true
title = &amp;quot;about&amp;quot;
Tag = [&amp;quot;blog&amp;quot;,&amp;quot;post&amp;quot;]

+++

# About me
- Jimmy Song
- rootsongjc@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我在页面中加入了一些内容，然后运行Hugo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -t hyde --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;参数的意思是使用hyde主题渲染我们的页面，注意到&lt;code&gt;about.md&lt;/code&gt;目前是作为草稿，即&lt;code&gt;draft&lt;/code&gt;参数设置为&lt;code&gt;true&lt;/code&gt;，运行Hugo时要加上&lt;code&gt;--buildDrafts&lt;/code&gt;参数才会生成被标记为草稿的页面。 在浏览器输入localhost:1313，就可以看到我们刚刚创建的页面。&lt;/p&gt;

&lt;p&gt;注意观察当前目录下多了一个文件夹&lt;code&gt;public/&lt;/code&gt;，这里面是Hugo生成的整个静态网站，如果使用Github pages来作为博客的Host，你只需要将&lt;code&gt;public/&lt;/code&gt;里的文件上传就可以，这相当于是Hugo的输出。&lt;/p&gt;

&lt;p&gt;详细说明请看这位朋友的文章：&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;http://nanshu.wang/post/2015-01-31/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;hugo new&lt;/code&gt;命令生成的文章前面的加号中包括的那几行，是用来设置文章属性的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt; 自动增加时间标签，页面上默认显示n篇最新的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;draft&lt;/strong&gt; 设置为false的时候会被编译为HTML，true则不会编译和发表，在本地修改文章时候用true。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; 设置文章标题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tags&lt;/strong&gt; 数组，可以设置多个标签，都好隔开，hugo会自动在你博客主页下生成标签的子URL，通过这个URL可以看到所有具有该标签的文章。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt; 文章分类，跟Tag功能差不多。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天先说到这里，再次声明下，&lt;a href=&#34;http://rootsongjc.github.io&#34;&gt;Jimmy&amp;rsquo;s blog&lt;/a&gt;就是用👆得步骤建立的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jimmy&amp;rsquo;s blog的页面比较简陋，你可以在&lt;a href=&#34;themes.gohugo.io&#34;&gt;这里&lt;/a&gt;找到更多可爱的模版。另外我打算给我翻译的书&lt;a href=&#34;http://rootsongjc.github.io/talks/cloud-native-go/&#34;&gt;Cloude Native Go&lt;/a&gt;做一个静态页面，用来发表图书信息、勘误、讨论等，现在已经有了&lt;a href=&#34;http://rootsongjc.github.io/cloud-native-go/&#34;&gt;雏形&lt;/a&gt;，欢迎大家关注。🙏&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>微服务设计读书笔记</title>
      <link>http://rootsongjc.github.io/talks/microservice-reading-notes/</link>
      <pubDate>Sat, 11 Mar 2017 15:45:27 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/microservice-reading-notes/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20160625036.jpg&#34; alt=&#34;青海湖畔&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(题图：青海湖畔  Jun 25,2016)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;最近在看&lt;strong&gt;《微服务设计（Sam Newman著）》&lt;/strong&gt;这本书，&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/docs/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B8%AD%E6%96%87%E5%AE%8C%E6%95%B4%E7%89%88-Sam%20Newman-%E4%BA%BA%E6%B0%91%E9%82%AE%E7%94%B5%E5%87%BA%E7%89%88%E7%A4%BE.pdf&#34;&gt;下载本书PDF&lt;/a&gt;(扫描版，高清49.17M)。作者是&lt;strong&gt;ThoughtWorks&lt;/strong&gt;的Sam Newman。这本书中包括很多业界是用案例，比如&lt;strong&gt;Netflix&lt;/strong&gt;和&lt;strong&gt;亚马逊&lt;/strong&gt;。有兴趣的话大家一起看看讨论一下。😄&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%B9%A6%E7%9A%AE%E7%85%A7.jpg&#34; alt=&#34;微服务设计书皮照片&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本书读者交流微信群二维码，扫码入群（3月18日前有效）&lt;/strong&gt;，如果二维码失效，请移步&lt;a href=&#34;http://rootsongjc.github.io/about/&#34;&gt;这里&lt;/a&gt;加我微信，拉你入群。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg&#34; alt=&#34;二维码&#34; /&gt;&lt;/p&gt;

&lt;p&gt;P.S 这本书比较偏理论，另外还有一本中国人写的书，&lt;strong&gt;《微服务架构与实践，王磊著，电子工业出版社》&lt;/strong&gt;，&lt;a href=&#34;http://olz1di9xf.bkt.clouddn.com/docs/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E7%8E%8B%E7%A3%8A%E8%91%97-%E7%94%B5%E5%AD%90%E5%B7%A5%E4%B8%9A%E5%87%BA%E7%89%88%E7%A4%BE.pdf&#34;&gt;下载本书的pdf&lt;/a&gt;，文字版，大小28.08M。这个人同样也是&lt;strong&gt;ThoughtWorks&lt;/strong&gt;的，两个人的观点不谋而合，依然是便理论的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Go - 基于Go和React的web云服务构建指南&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这本书是我最近在翻译的，将由&lt;strong&gt;电子工业出版社&lt;/strong&gt;出版，本书根据实际案例教你如何构建一个web微服务，是实践为服务架构的很好的参考。&lt;a href=&#34;http://rootsongjc.github.io/talks/cloud-native-go/&#34;&gt;查看本书介绍&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;1-微服务初探&#34;&gt;1.微服务初探&lt;/h2&gt;

&lt;h3 id=&#34;什么是微服务&#34;&gt;什么是微服务？&lt;/h3&gt;

&lt;p&gt;微服务（Microservices）这个词比较新颖，但是其实这种架构设计理念早就有了。&lt;em&gt;微服务是一种分布式架构设计理念，为了推动细粒度服务的使用，这些服务要能协同工作，每个服务都有自己的生命周期。一个为服务就是一个独立的实体，可以独立的部署在PAAS平台上，也可以作为一个独立的进程在主机中运行。服务之间通过API访问，修改一个服务不会影响其它服务。&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;微服务的好处&#34;&gt;微服务的好处&lt;/h3&gt;

&lt;p&gt;微服务的好处有很多，包括:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;帮助你更快的采用新技术&lt;/li&gt;
&lt;li&gt;解决技术异构的问题，因为是用API网络通信，可以使用不同的语言和技术开发不同的服务&lt;/li&gt;
&lt;li&gt;增强系统弹性，服务的边界比较清晰，便于故障处理&lt;/li&gt;
&lt;li&gt;方便扩展，比如使用容器技术，可以很方便的一次性启动很多个微服务&lt;/li&gt;
&lt;li&gt;方便部署，因为微服务之间彼此独立，所以能够独立的部署单个服务而不影响其它服务，如果部署失败的话还可以回滚&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别忘了康为定律，微服务可以很好契合解决组织架构问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可重用，可随意组合&lt;/li&gt;
&lt;li&gt;便于维护，可以随时重写服务，不必担心历史遗留问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;与面向服务架构soa的关系&#34;&gt;与面向服务架构SOA的关系&lt;/h3&gt;

&lt;p&gt;可以说微服务架构师SOA的一种，但是目前的大多数SOA做的都不好，在&lt;code&gt;通信协议的选择&lt;/code&gt;、&lt;code&gt;第三方中间件的选择&lt;/code&gt;、&lt;code&gt;服务力度如何划分&lt;/code&gt;方面做的都不够好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;微服务与SOA的共同点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;都使用共享库，比如可重用的代码库&lt;/li&gt;
&lt;li&gt;模块化，比如Java中的OSGI(Open Source Gateway Initiative)、Erlang中的模块化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-架构师的职责&#34;&gt;2.架构师的职责&lt;/h2&gt;

&lt;h3 id=&#34;架构师应该关心是什么&#34;&gt;架构师应该关心是什么&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;架构师（Architect）&lt;/strong&gt;在英文中和&lt;strong&gt;建筑师&lt;/strong&gt;是同一个词，他们之间也有很多相同之处，架构师构建的是软件，而建筑师构建的是建筑。&lt;/p&gt;

&lt;p&gt;终于看到了我翻译的*Cloud Native Go*第14章中引用的这本书的原话了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%BC%95%E7%94%A8%E7%BF%BB%E8%AF%91.jpg&#34; alt=&#34;原话&#34; /&gt;&lt;/p&gt;

&lt;p&gt;软件的需求变更是&lt;strong&gt;来的那么快来的那么直接&lt;/strong&gt;，不像建筑那样可以在设计好后按照设计图纸一步步的去建设。&lt;/p&gt;

&lt;p&gt;架构师应该关心的是什么呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;保证系统适合开发人员在上面工作&lt;/li&gt;
&lt;li&gt;关注服务之间的交互，不需要过于关注各个服务内部发生的事情，比如服务之间互相调用的接口，是使用&lt;code&gt;protocol buffer&lt;/code&gt;呢，还是使用&lt;code&gt;RESTful API&lt;/code&gt;，还是使用&lt;code&gt;Java RMI&lt;/code&gt;，这个才是架构师需要关注的问题，至于服务内部究竟使用什么，那就看开发人员自己了，&lt;strong&gt;架构师更需要关注系统的边界和分区&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;架构师应该与团队在一起，&lt;strong&gt;结对编程&lt;/strong&gt; 🤓🤓 了解普通工作，知道普通的工作是什么样子，做一个&lt;em&gt;代码架构师&lt;/em&gt; 😂&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;架构师应该做什么&#34;&gt;架构师应该做什么&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;提供原则指导实践，比如Heroku的&lt;a href=&#34;http://rootsongjc.github.io/blogs/12-factor-app/&#34;&gt;12因素法则&lt;/a&gt;用来指导SAAS应用架构一样，微服务架构设计也要有一套原则。&lt;/li&gt;
&lt;li&gt;提供要求标准，通过日志功能和监控对服务进行集中式管理，明确接口标准，提供安全性建议。&lt;/li&gt;
&lt;li&gt;代码治理。为开发人员提供范例和服务代码模板。&lt;/li&gt;
&lt;li&gt;解决技术债务。&lt;/li&gt;
&lt;li&gt;集中治理和领导。维持良好的团队关系，当团队跑偏的时候及时纠正。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-服务建模&#34;&gt;3.服务建模&lt;/h2&gt;

&lt;p&gt;以&lt;strong&gt;MusicCorp&lt;/strong&gt;这家公司的服务为例子讲解。&lt;/p&gt;

&lt;p&gt;服务建模的两个指导原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;高内聚：关键是找出问题的边界，把相关的问题放在同一个服务中。&lt;/li&gt;
&lt;li&gt;松耦合：修改一个服务不需要修改另一个。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用&lt;strong&gt;限定上下文&lt;/strong&gt;（一个由显示边界限定的特定指责）的方法将服务拆分，比如MusicCorp的服务可以拆分为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;财务部门&lt;/li&gt;
&lt;li&gt;仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们都不需要知道各自的具体实现，只要给它们提供特定的输入就会有你想要的产出。&lt;/p&gt;

&lt;p&gt;过早的将一个系统划分成微服务的代价非常高，尤其是在面对新领域时，将一个已有的代码库划分成微服务会比葱头开始建设微服务要简单的多。&lt;/p&gt;

&lt;h2 id=&#34;4-集成&#34;&gt;4.集成&lt;/h2&gt;

&lt;p&gt;使用共享数据库，为用户创建好接口，可以使用RPC（protocol buffer、thrift）或者REST。服务端和客户端消息格式可以用Json或XML。当然每种技术都有各自的适用场景，结合自己的业务选择。&lt;/p&gt;

&lt;p&gt;微服务的协作方式是什么样的呢？基于事件的异步通信，使用消息中间件来实现事件发布和消费者接收机制。比如用Kafka或RabbitMQ。&lt;/p&gt;

&lt;h2 id=&#34;5-分解单块系统&#34;&gt;5.分解单块系统&lt;/h2&gt;

&lt;p&gt;分解巨大无比没人感动的单块系统，首先要做的是理清代码库，找到&lt;strong&gt;接缝&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;分解系统带来的好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;加快以后系统开发速度&lt;/li&gt;
&lt;li&gt;划清了团队结构（又是康威定律）&lt;/li&gt;
&lt;li&gt;增加安全审计功能后，保障安全性&lt;/li&gt;
&lt;li&gt;利于开展新技术&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-部署&#34;&gt;6. 部署&lt;/h2&gt;

&lt;p&gt;这一块跟传统服务的部署并没有太大的不同，无非是微服务的短平快，加快了CI（持续集成）的速度。如果将微服务打包为docker镜像，使用Jenkins、ansible、puppet等技术来部署微服务可以实现部署自动和效率的显著提高。&lt;/p&gt;

&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;

&lt;p&gt;该书的后面还讲了&lt;strong&gt;测试&lt;/strong&gt;、&lt;strong&gt;监控&lt;/strong&gt;、&lt;strong&gt;安全&lt;/strong&gt;、&lt;strong&gt;康威定律&lt;/strong&gt;、最后还上升到&lt;strong&gt;人本&lt;/strong&gt;，给予广大的软件开发人员强烈的人文关怀，可见提倡架构师要融入团队，最一个&lt;strong&gt;代码架构师&lt;/strong&gt;和&lt;strong&gt;结对编程&lt;/strong&gt;的作者是多么博爱❤️。&lt;/p&gt;

&lt;p&gt;该书的核心部分是&lt;strong&gt;第11章规模化微服务&lt;/strong&gt;，为将在下篇中来探讨一下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloud Native Go - 基于Go和React的web云服务构建指南</title>
      <link>http://rootsongjc.github.io/talks/cloud-native-go/</link>
      <pubDate>Fri, 03 Mar 2017 17:29:54 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/cloud-native-go/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/20160326003.jpg&#34; alt=&#34;北京植物园桃花&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(题图：北京植物园桃花 Mar 26,2016)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;更新于Apr 3,2017&lt;/p&gt;

&lt;p&gt;最近在翻译Kevin Hoffman和Dan Nemeth的书《Cloud Native Go - 基于Go和React的web云服务构建指南》。目前已经完成图书的翻译，已交给编辑校对。本书将由&lt;strong&gt;电子工业出版社&lt;/strong&gt;出版。&lt;/p&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Cloud Native Go向开发人员展示如何构建大规模云应用程序，在满足当今客户的强大需求的同时还可以动态扩展来处理几乎任何规模的数据量、流量或用户。&lt;/p&gt;

&lt;p&gt;Kevin Hoffman和Dan Nemeth详细描述了现代云原生应用程序，阐明了与快速、可靠的云原生开发相关的因素、规则和习惯。他们还介绍了Go这种“简单优雅”的高性能语言，它特别适合于云开发。&lt;/p&gt;

&lt;p&gt;在本书中你将使用Go语言创建微服务，使用ReactJS和Flux添加前端Web组件，并掌握基于Go的高级云原生技术。Hoffman和Nemeth展示了如何使用Wercker、Docker和Dockerhub等工具构建持续交付管道; 自动推送应用程序到平台上; 并系统地监控生产中的应用程序性能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;学习“云之道”：为什么开发好的云软件基本上是关于心态和规则&lt;/li&gt;
&lt;li&gt;了解为什么使用Go语言是云本地微服务开发的理想选择&lt;/li&gt;
&lt;li&gt;规划支持持续交付和部署的云应用程序&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设计服务生态系统，然后以test-first的方式构建它们&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将正在进行的工作推送到云&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用事件源和CQRS模式来响应大规模和高吞吐量&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安全的基于云的Web应用程序：做与不做的选择&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用第三方消息传递供应商创建响应式云应用程序&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用React和Flux构建大规模，云友好的GUI&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;监控云中的动态扩展，故障转移和容错&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面先罗列下目录，以飨读者。&lt;/p&gt;

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;p&gt;Cloud Native Go. 1&lt;/p&gt;

&lt;p&gt;构建基于Go和React的云原生Web应用&amp;hellip; 1&lt;/p&gt;

&lt;p&gt;云服务构建完全指南&amp;hellip; 1&lt;/p&gt;

&lt;p&gt;目录&amp;hellip; 4&lt;/p&gt;

&lt;p&gt;前言&amp;hellip; 8&lt;/p&gt;

&lt;p&gt;关于作者&amp;hellip; 9&lt;/p&gt;

&lt;p&gt;致谢&amp;hellip; 9&lt;/p&gt;

&lt;h3 id=&#34;第1章-云之道-10&#34;&gt;第1章        云之道&amp;hellip; 10&lt;/h3&gt;

&lt;p&gt;云的优势&amp;hellip; 10&lt;/p&gt;

&lt;p&gt;崇尚简洁&amp;hellip; 11&lt;/p&gt;

&lt;p&gt;测试优先，测试一切&amp;hellip; 11&lt;/p&gt;

&lt;p&gt;尽早发布, 频繁发布&amp;hellip; 12&lt;/p&gt;

&lt;p&gt;自动化一切&amp;hellip; 13&lt;/p&gt;

&lt;p&gt;建立服务生态系统&amp;hellip; 13&lt;/p&gt;

&lt;p&gt;为什么使用GO?. 14&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 15&lt;/p&gt;

&lt;h3 id=&#34;第2章-开始-16&#34;&gt;第2章        开始… 16&lt;/h3&gt;

&lt;p&gt;正确的工具&amp;hellip; 16&lt;/p&gt;

&lt;p&gt;配置Git 16&lt;/p&gt;

&lt;p&gt;建立Go. 18&lt;/p&gt;

&lt;p&gt;配置您的Go工作区&amp;hellip; 18&lt;/p&gt;

&lt;p&gt;检查环境&amp;hellip; 19&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 19&lt;/p&gt;

&lt;h3 id=&#34;第3章-go入门-20&#34;&gt;第3章        Go入门&amp;hellip; 20&lt;/h3&gt;

&lt;p&gt;建立Hello Cloud. 20&lt;/p&gt;

&lt;p&gt;使用基本函数&amp;hellip; 21&lt;/p&gt;

&lt;p&gt;使用结构体&amp;hellip; 23&lt;/p&gt;

&lt;p&gt;介绍Go接口&amp;hellip; 24&lt;/p&gt;

&lt;p&gt;向结构体添加方法&amp;hellip; 24&lt;/p&gt;

&lt;p&gt;Go中的接口动态类型检查&amp;hellip; 25&lt;/p&gt;

&lt;p&gt;使用第三方包&amp;hellip; 27&lt;/p&gt;

&lt;p&gt;创建自己的包&amp;hellip; 28&lt;/p&gt;

&lt;p&gt;导出函数和数据&amp;hellip; 28&lt;/p&gt;

&lt;p&gt;创建包&amp;hellip; 28&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 30&lt;/p&gt;

&lt;h3 id=&#34;第4章-持续交付-31&#34;&gt;第4章        持续交付&amp;hellip; 31&lt;/h3&gt;

&lt;p&gt;Docker介绍&amp;hellip; 31&lt;/p&gt;

&lt;p&gt;为什么要使用Docker？&amp;hellip; 31&lt;/p&gt;

&lt;p&gt;安装Docker 32&lt;/p&gt;

&lt;p&gt;运行Docker镜像&amp;hellip; 33&lt;/p&gt;

&lt;p&gt;与Wercker的持续集成&amp;hellip; 33&lt;/p&gt;

&lt;p&gt;持续集成最佳实践&amp;hellip; 34&lt;/p&gt;

&lt;p&gt;为什么使用Wercker？&amp;hellip; 34&lt;/p&gt;

&lt;p&gt;安装Wercker CLI 36&lt;/p&gt;

&lt;p&gt;创建Wercker配置文件&amp;hellip; 36&lt;/p&gt;

&lt;p&gt;使用Wercker进行构建&amp;hellip; 40&lt;/p&gt;

&lt;p&gt;部署到DockerHub. 41&lt;/p&gt;

&lt;p&gt;读者练习：创建完整的开发管道&amp;hellip; 42&lt;/p&gt;

&lt;p&gt;高级挑战：集成第三方库&amp;hellip; 42&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 43&lt;/p&gt;

&lt;h3 id=&#34;第5章-在go中构建微服务-44&#34;&gt;第5章        在Go中构建微服务&amp;hellip; 44&lt;/h3&gt;

&lt;p&gt;设计API First的服务&amp;hellip; 44&lt;/p&gt;

&lt;p&gt;通过Apiary测试和发布文档&amp;hellip; 46&lt;/p&gt;

&lt;p&gt;架设微服务&amp;hellip; 46&lt;/p&gt;

&lt;p&gt;构建Test First的服务&amp;hellip; 48&lt;/p&gt;

&lt;p&gt;创建第一个失败测试&amp;hellip; 49&lt;/p&gt;

&lt;p&gt;测试Location Header 51&lt;/p&gt;

&lt;p&gt;壮丽的蒙太奇 - 迭代测试&amp;hellip; 52&lt;/p&gt;

&lt;p&gt;在云中部署和运行&amp;hellip; 53&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 55&lt;/p&gt;

&lt;h3 id=&#34;第6章-运用后端服务-56&#34;&gt;第6章        运用后端服务&amp;hellip; 56&lt;/h3&gt;

&lt;p&gt;设计服务系统&amp;hellip; 56&lt;/p&gt;

&lt;p&gt;测试优先构建依赖服务&amp;hellip; 57&lt;/p&gt;

&lt;p&gt;构建Fulfillment服务&amp;hellip; 57&lt;/p&gt;

&lt;p&gt;构建Catalog服务&amp;hellip; 60&lt;/p&gt;

&lt;p&gt;在服务之间共享结构化数据&amp;hellip; 64&lt;/p&gt;

&lt;p&gt;使用服务捆绑去外部化地址与元数据&amp;hellip; 65&lt;/p&gt;

&lt;p&gt;服务发现&amp;hellip; 67&lt;/p&gt;

&lt;p&gt;读者练习&amp;hellip; 69&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 70&lt;/p&gt;

&lt;h3 id=&#34;第7章-构建数据服务-71&#34;&gt;第7章        构建数据服务&amp;hellip; 71&lt;/h3&gt;

&lt;p&gt;构建MongoDB存储库&amp;hellip; 71&lt;/p&gt;

&lt;p&gt;集成测试一个Mongo-Backed服务&amp;hellip; 76&lt;/p&gt;

&lt;p&gt;在云中运行&amp;hellip; 80&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 81&lt;/p&gt;

&lt;h3 id=&#34;第8章-事件源和cqrs-83&#34;&gt;第8章        事件源和CQRS.. 83&lt;/h3&gt;

&lt;p&gt;现实源自事件&amp;hellip; 83&lt;/p&gt;

&lt;p&gt;最终还是一致的&amp;hellip; 85&lt;/p&gt;

&lt;p&gt;介绍命令查询责任分离&amp;hellip; 86&lt;/p&gt;

&lt;p&gt;事件源案例&amp;hellip; 87&lt;/p&gt;

&lt;p&gt;代码示例：管理无人机军队&amp;hellip; 88&lt;/p&gt;

&lt;p&gt;构建命令处理程序服务&amp;hellip; 88&lt;/p&gt;

&lt;p&gt;构建事件处理器&amp;hellip; 92&lt;/p&gt;

&lt;p&gt;构建查询处理程序服务&amp;hellip; 95&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 96&lt;/p&gt;

&lt;h3 id=&#34;第9章-使用go构建web应用程序-97&#34;&gt;第9章 使用Go构建web应用程序&amp;hellip; 97&lt;/h3&gt;

&lt;p&gt;处理静态文件和资产&amp;hellip; 97&lt;/p&gt;

&lt;p&gt;支持javascript客户端&amp;hellip; 98&lt;/p&gt;

&lt;p&gt;使用服务端模板&amp;hellip; 100&lt;/p&gt;

&lt;p&gt;处理表单&amp;hellip; 102&lt;/p&gt;

&lt;p&gt;使用Cookie和会话状态&amp;hellip; 102&lt;/p&gt;

&lt;p&gt;使用Wercker构建和部署&amp;hellip; 104&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 105&lt;/p&gt;

&lt;h3 id=&#34;第10章-云安全-106&#34;&gt;第10章 云安全&amp;hellip; 106&lt;/h3&gt;

&lt;p&gt;保护一个web应用程序&amp;hellip; 106&lt;/p&gt;

&lt;p&gt;保护微服务&amp;hellip; 111&lt;/p&gt;

&lt;p&gt;隐私和数据安全&amp;hellip; 113&lt;/p&gt;

&lt;p&gt;阅读练习&amp;hellip; 114&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 115&lt;/p&gt;

&lt;h3 id=&#34;第11章-使用websockets-116&#34;&gt;第11章 使用WebSockets. 116&lt;/h3&gt;

&lt;p&gt;解析WebSockets. 116&lt;/p&gt;

&lt;p&gt;WebSockets和云的诞生&amp;hellip; 117&lt;/p&gt;

&lt;p&gt;使用消息传递提供程序构建WebSocket应用程序&amp;hellip; 119&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 122&lt;/p&gt;

&lt;h3 id=&#34;第12章-使用react构建web视图-123&#34;&gt;第12章 使用React构建web视图… 123&lt;/h3&gt;

&lt;p&gt;JavaScript State of the Union JavaScript  . 123&lt;/p&gt;

&lt;p&gt;为什么选择React？&amp;hellip; 123&lt;/p&gt;

&lt;p&gt;React应用程序的解剖&amp;hellip; 125&lt;/p&gt;

&lt;p&gt;构建一个简单的React应用程序&amp;hellip; 127&lt;/p&gt;

&lt;p&gt;测试React应用程序&amp;hellip; 132&lt;/p&gt;

&lt;p&gt;进一步阅读&amp;hellip; 132&lt;/p&gt;

&lt;p&gt;总结. 133&lt;/p&gt;

&lt;h3 id=&#34;第13章-使用flux构建高可扩展性ui-134&#34;&gt;第13章      使用Flux构建高可扩展性UI 134&lt;/h3&gt;

&lt;p&gt;Flux介绍&amp;hellip; 134&lt;/p&gt;

&lt;p&gt;创建Flux应用程序&amp;hellip; 136&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 141&lt;/p&gt;

&lt;h3 id=&#34;第14章-创建完整应用world-of-fluxcraft-143&#34;&gt;第14章      创建完整应用World of FluxCraft 143&lt;/h3&gt;

&lt;p&gt;World of FluxCraft介绍&amp;hellip; 143&lt;/p&gt;

&lt;p&gt;架构概览&amp;hellip; 145&lt;/p&gt;

&lt;p&gt;Flux GUI 146&lt;/p&gt;

&lt;p&gt;命令处理&amp;hellip; 148&lt;/p&gt;

&lt;p&gt;事件处理&amp;hellip; 149&lt;/p&gt;

&lt;p&gt;维持现实服务的状态&amp;hellip; 149&lt;/p&gt;

&lt;p&gt;地图管理&amp;hellip; 150&lt;/p&gt;

&lt;p&gt;自动验收测试&amp;hellip; 150&lt;/p&gt;

&lt;p&gt;总结&amp;hellip; 151&lt;/p&gt;

&lt;h3 id=&#34;第15章-结论-152&#34;&gt;第15章     结论&amp;hellip; 152&lt;/h3&gt;

&lt;p&gt;我们学到了什么？&amp;hellip; 152&lt;/p&gt;

&lt;p&gt;下一步&amp;hellip; 153&lt;/p&gt;

&lt;h3 id=&#34;a云应用的故障排查-154&#34;&gt;A云应用的故障排查… 154&lt;/h3&gt;

&lt;p&gt;使用日志流&amp;hellip; 154&lt;/p&gt;

&lt;p&gt;健康和性能监控&amp;hellip; 154&lt;/p&gt;

&lt;p&gt;在云中调试应用程序&amp;hellip; 155&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TalkingData Annual Meeting</title>
      <link>http://rootsongjc.github.io/talks/td-annual-meeting/</link>
      <pubDate>Sun, 26 Feb 2017 20:18:54 +0800</pubDate>
      
      <guid>http://rootsongjc.github.io/talks/td-annual-meeting/</guid>
      <description>

&lt;h1 id=&#34;talkingdata-annual-meeting-2017&#34;&gt;TalkingData Annual Meeting 2017&lt;/h1&gt;

&lt;p&gt;Dayin Theater, Beijing Friday, Feb 24, 2017&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/2017022401.jpeg&#34; alt=&#34;pic1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://olz1di9xf.bkt.clouddn.com/2017022402.jpeg&#34; alt=&#34;pics2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href=&#34;http://rootsongjc.github.io&#34;&gt;Jimmy Song&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>